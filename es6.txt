let const 声明 变量和常量
1只在当前代码块中有效
2作用域不会被提升
3不能重复申明
let for循环体现let的父子作用域
const申明的常量必须赋值

解构赋值
ES6允许按照一定模式从数组和对象中提取值，这被称为解构赋值
1基本用法
let [name,age,sex]=['李四',20,'女'];

2对象的解构赋值
let{name,age,friends,pet}={name:'张三',age:55,friends:['lulu','王屋'],pet:{name:'土豆',age:5}}

3数组的解构赋值
let [arr1,[arr2,arr3,[arr4,arr5]]]=[1,[2,3,[4,5]]]

4基本类型的解构赋值
let[a,b,c,d,e]='我是中国人'


数据集合set
特点1、类似数组，但没有重复的元素（唯一的）2、开发中用于去除重复数据3、key和value都是相等的
一个属性size
四个方法
add	添加
delete	删除
has	判断
clear	清空
创建一个集合
let set=new Set(['张三','李四','王五'])

数据集合map
特点1、类似于对象，本质上是赋值对的集合2、“键”不局限于字符串，各种类型的值（包括对象）都可以当作键3、对象“字符串-值”，map“值-值”，是一种更加完善的Hash机构实现
创建
    let obj1={a:1},obj2={b:2};
    const map=new Map([
       ['name','张三'],
       ['age',198],
       ['sex','男'],
        [obj1,'今天天气和好'],
        [obj2,'适合码'],
        [[1,2],'适合敲代码']
   ])
一个属性size
方法
set和get		添加和获取
  map.set('friends',['赵六','力气']).set(['dog'],'小花');
  map.get('name')
delete	删除
has    判断
//keys() values() entries()
    console.log(map.keys());
遍历
 map.forEach(function (value,index) {
     console.log(index+':'+value);


Symbol ES6引入新的原始数据类型Symbol,表示独一无二
对象属性名可以有两种类型:1、字符串2、Symbol类型(独一无二，不会与其他属性名产生冲突)
const obj={};
obj[Symbol('name')]='张三';
obj[Symbol('name')]='李四';
console.log(obj);

Class的基本运用

 //2.通过claa面向对象
    class Person{
        constructor(name,age){
            this.name=name;
            this.age=age;
        }
        print(){
            console.log('我叫'+this.name+',今年'+this.age+'岁')
        }
    }
    let person=new Person('张三',19);
    console.log(person);
    person.print()
</script>

内置对象扩展
1、模版字符串
let str='适合敲代码'
    let className='test'
    let html=`
        <html>
            <head></head>
            <body>
                <p>今天天气很好！</p>
                <div class="${className}">${str}</div>
            </body>
        </html>`
2.数组的扩展
Array.from
	let allLis=document.querySelectorAll('li');
    	console.log(Array.isArray(allLis));
    	console.log(Array.from(allLis));
    	console.log(Array.isArray(Array.from(allLis)));
Array.of
    Array.of('张三', '李四', '王屋')
3.对象的扩展 key和value是一样的，写一个就够了
let name='张三';
    let age='18';
    let obj={
        name,age
    }

Object.assign

let obj1={name:'张三'};
    let obj2={age:18};
    let obj3={sex:'男'};
    let obj4={friends:'李四'};
    let obj={}
    Object.assign(obj,obj1,obj2,obj3,obj4);
    console.log(obj);
延展操作符
例子1(拆分)
    let str='今天天气很好！';
    let strArr=[...str]
    console.log(strArr);
例子2(加入)
	let student={
        	name:'张三',
        	age:18,
        	sex:'男'
    	}
    <Person {...student}/>
例子3(去重)
 let myArr=[1,2,10,'张三',20,2,1];
   
    [...new Set(myArr)]

函数扩展
 1.形参设置默认值
    function sum(num1=20,num2=10) {
        console.log(num1 + num2);
    }
    sum(40,50)
 2.参数形式 延展操作符
    function sum(name,...nums) {
        let result=0;
        console.log(name);
        for(let value of nums){
            result+=value
        }
        return result
    }

    console.log(sum('张三',10, 20, 30, 50));

//箭头函数()=>{}
    let sum=(num1,num2)=>{ return num1 + num2 }
    console.log(sum(100, 300));







































































