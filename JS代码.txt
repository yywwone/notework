
      
v v <script language="javascript"></script>  JS开始结束

<script src="js.js"></script> js引用

<a href="JavaScript:";>阻止页面跳转\

location.href='当前文档名' 重新加载

aa=<?php echo $_GET['id'];?>;	获取地址栏get数值





\t首行缩进
\n换行


var   用来声明变量
=     赋值
*     乘以
布尔型：true对  false不是



undefined（声明变量未赋值）
null     （已赋值）

算数运算符 +,-,*,/,%(取余),++(递增+1),--（递减-1）,-(求反)


逻辑运算符    &&、||、！ 与、或、非

赋值运算符：=、+=、-=、*=、/=


三目运算符       表达式？结果１：结果２

if(条件){语句集1;}else{语句集2；}条件为真执行语句集1/条件为假执行语句集2

if(){if(){}else{}}  if语句嵌套

switch (表达式)
{         case 常量1 : 
 	   JavaScript语句1;
	   break;               break中断
 	  case 常量2 : 
 	   JavaScript语句2;
 	   break;
 	  ...
 	  default :             default默认值
           JavaScript语句3;    
}

for(初始化;  条件;  增量)
 {
    语句集; }


while(条件)
 {
    语句集;
}


do{
语句集;
}while(条件)；

中断语句
break           中断所有剩余的语句和后面的循环
continue	中断本次循环剩余的语句，进入下一次循环


javascript:名称()   JS函数

定义JS函数方法1
function 函数名称(参数){程序体;return 表达式; //可选,当有返回值时使用return关键字} ;

定义JS函数方法2
var 函数名称=function(参数){函数主体；return 表达式;};

显示信息
function showMessage(msg){
		msg=msg+"\n 版权所有者:xxx";
		window.alert(msg);
showMessage(信息);

系统函数
变量名=parseInt(变量名)    将字符串转换为整型数字

变量名=parseFloat(变量名)  将字符串转换为浮点型数字

变量名=number(变量名)	   将字符类型转换为数值类型(有字符无论前后直接返回NaN)  NaN非数



isNaN(变量名)     检测某个值是否是非数字类型的值  返回false true
Number()	  检测某个值是否是数字类型的值 
toFixed(保留位数) 保留小数点后面多少位
调用全局函数可以使用("函数名()")和(函数名)   
调用局部函数必须使用(函数名)

eval（“字符串表达式”） 可计算某个字符串，并执行其中的的 JavaScript 代码。
split() 方法用于把一个字符串分割成字符串数组。
join() 方法用于把数组中的所有元素放入一个字符串。

this 当前对象

<a href="javascript:函数名();"></a>                         A标签触发函数


return false 打断

弹窗
document.write() 	   输出信息

alert()         	   弹出文本
alert(typeof(变量名称))    打印变量类型

confirm()       	   弹出文本：确定返回true   取消返回false
prompt()        	   弹出文本和文本框：确定返回输入值  取消返回null 可以输入文本框的默认值
console.log(typeof obj)	   控制台打印函数



字符串属性(String对象)
length                          字符串长度或者字符个数
substring（起始位置，结束位置） 取子串
indexOf(字符,起始位置)		查找字符在字符串中的位置
charAt(index)			获取位于指定索引位置的字符
replace()			替换
bold（）                        加粗
fontcolor（“RGB”）            变颜色
toLowerCase()                   小写转换
toUpperCase()   		大写转换
slice(开始，结尾) 		(从0开始)方法可从已有的数组中返回选定的元素。

 Array(数组)(一维数组)
var 数组名 =new Array (”数组元素”,”数组元素” ,数组元素); 声明数组方法1

var 数组名=new Array(数组元素个数);(索引数组)
数组名[0]="数组元素";
数组名[1]="数组元素";
数组名[2]="数组元素";

var 数组名=new Array(数组元素个数);(关联数组)
数组名['关联名']="数组元素";
数组名['关联名']="数组元素";
数组名['关联名']="数组元素";

Array(数组)(二维数组)
var 数组名 =new Array (["数组元素","数组元素","数组元素"],["数组元素","数组元素","数组元素"]); (索引数组)

var 数组名 =new Array	(关联数组)
数组名['关联名']=["数组元素","数组元素","数组元素",];
数组名['关联名']=["数组元素","数组元素",];	
数组名['关联名']=["数组元素","数组元素","数组元素","数组元素",];
		

splice()方法向/从数组中添加/删除项目，然后返回被删除的项目。
	index	必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。
	howmany	必需。要删除的项目数量。如果设置为 0，则不会删除项目。
	item1, ..., itemX	可选。向数组添加的新项目。

push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度。

Math.属性名(数学对象)
Math.E   数学中的常数约为2.718
Math.PI  数学中的π约为3.14
Math.round()  向下取整数
Math.ceil()   向上取整数
math.max(0,1,2,3,x)返回一个最大的值
math.min(0,1,2,3,x)返回一个最小的值
Math.Pow(base,exponent) 基于几方次的值。
Math.floor(x)方法?-- 返回小于等于数字参数的最大整数，对数字进行下舍入 
Math.random() 方法--返回介于 0-1 之间的一个随机数,包括0，但不包括1。

Math.floor(Math.random()*100+1) 随即产生一个1-100之间的整数


Date(日期时间对象)
var	名称 = new Date(); //直接创建日期对象
var	名称 =new Date("月份  29,1998,10:30:00")    //指定日期的时间对象

get获取 set修改

setYear()		修改年份

getFullYear(）		获取年份
getMonth()	        获取月份(0--11之间，0是1月）
getDate()		获取日期
getDay()		获取星期(0--6之间，0是星期天)
getHours()		获取小时
getMinutes()		获取分钟
getSeconds()		获取秒钟
getTime                 获取1970年1月1日0时0分0秒到当前时间的毫秒数


//js判断浏览器高度和宽度
document.documentElement.clientHeight;
document.documentElement.clientWidth;

JS获取浏览器信息及屏幕分辨率 


网页可见区域宽：document.body.clientWidth 

网页可见区域高：document.body.clientHeight 
网页可见区域宽：document.body.offsetWidth (包括边线和滚动条的宽) 
网页可见区域高：document.body.offsetHeight(包括边线的宽) 
网页正文全文宽：document.body.scrollWidth 
网页正文全文高：document.body.scrollHeight 
网页被卷去的高：document.body.scrollTop 
网页被卷去的左：document.body.scrollLeft 
网页正文部分上：window.screenTop 
网页正文部分左：window.screenLeft 
屏幕分辨率的高：window.screen.height 
屏幕分辨率的宽：window.screen.width 
屏幕可用工作区高度：window.screen.availHeight 
屏幕可用工作区宽度：window.screen.availWidth 
屏幕设置 window.screen.colorDepth 位彩色 
屏幕设置 window.screen.deviceXDPI 像素/英寸


For（变量名 in 已知对象名）{
    循环体
}
该语句的功能是用于对已知对象的所有属性进行操作的控制循环。

With（对象名）{
    循环体
}	
使用该语句的意思是：在该语句体内，任何对变量的引用被认为是这个对象的属性。


事件名：onxxx

事件按触发方式分类
-鼠标：
onclick		 (单击) 
ondblclick	（双击）  
onmousemove	（鼠标移动）   
onmousedown	（鼠标按下）  
onmouseup	（鼠标抬起）  
onmouseover	 (鼠标移入一个区域）  
onmouseout	（鼠标移出一个区域）

-键盘：
onkeydown       （键盘按下）   
onkeyup		（键盘抬起）   
onkeypress	（按一次键）

-其他：
onload		（文档加载）     
onunload	（文档卸载）     
onsubmit	（表单提交）    
onfocus		（获得焦点）    
onblur		（失去焦点）    
onselect	（选中文本）    
onchange	（文本或选项改变）   
onpaste		（粘贴）   
oncontextmenu	（右键上下文）  
onreset		（重置） 

e.preventDefault() 取消事件的默认动作。

单击事件onclick  -------- button  A
改变事件onchange  --- 	text    select
选中事件onselect ---- text  
------------------------------------------------------------------------
获得焦点事件onfocus   text  textarea select  button Radio checkbox   reset button    submit button  password
失去焦点onblur
-------------------------------------------------------------------------
载入文件onload  ---body
卸载文件onunload  ----body
-------------------------------------------------------------------------
鼠标移动onmousemove  ----body
鼠标移入onmouseover  ----- A  body  img  li
鼠标移出onmouseout ----- A  body  img  li
鼠标按下onmousedown ---button  A  body
鼠标抬起onmouseup ---button  A  body text
具有onsubmit特性的对象：form



window对象常用的方法
1.alert(参数)       		 	参数可以是常量 变量 表达式
2.prompt(“提示信息”，”默认值“)  cancle---null
3.open(“地址”,”窗口名”，”窗口属性“) 创建一个新的窗口或在指定窗口打开文档
4.close() 关闭窗口
5.setInterval (“函数”，毫秒数)  定时器   循环执行定时器变量名= setInterval (“函数”，毫秒数)
6.clearInterval(定时器变量名)     清除定时
7.setTimeout(“函数”，毫秒数)    延时器 只执行一次延时器变量名= setTimeout(“函数”，毫秒数) 
8.clearTimeout(延时器变量名)      清除延时
window.onscroll=函数名            窗口滚动时调用函数
window.onresize=函数名		  窗口大小改变时调用函数

Window.open（“url”，“窗口名称”，“属性设置”） 
窗口属性设置包括以下几点。
Height：窗口的高度
Width：窗口的宽度
Top：窗口距离屏幕上方的像素距离
Left：窗口距离屏幕左侧的像素距离
Toolbars：工具栏设置，yes或者1代表显示，No或者0代表不显示
Menubers，Scrollbars：表示菜单和滚动条，设置同上。
Resizable：是否允许窗口改变大小
Location：是否显示地址栏
Status：是否显示状态栏信息
Fullscreen：是否全屏显示

window.location.href	       获取浏览器地址
window.location.href="地址";   浏览器跳转到xx地址


BOM(浏览器对象模型)

document对象
getElementById("ID")     		获得指定ID值的对象(通过ID)
getElementsByTagName("tagName")         获得指定标签的对象集合(数组)（通过元素）
getElementsByName("Name")		获得指定Name值的对象集合（通过Name）
getElementsByClassName		根据类名返回一个集合
querySelector			返回一个对象
querySelectorAll		返回一个集合

checked=true/false    复选框是否选中 true 选中 false未选中
.children  				子元素


document.getElement.scrollTop       页面滚动的高度(浏览器不一样存放位置不一样)
document.body.scrollTop		    页面滚动的高度(浏览器不一样存放位置不一样)

window.innerWidth                    	用户浏览窗口宽度(除了IE之外的浏览器)
document.documentElement.clientWidth;	用户浏览窗口宽度(IE兼容模式)
document.body.clientWidth;		用户浏览窗口宽度(IE混杂模式)

document.compatMode=CSS1Compat  IE标准兼容模式 CSS1Compat

//IE混杂模式(quirks mode) 
BackCompat 在doctype声明中，没有使用DTD声明或者使用HTML4以下（不包括HTML4）的DTD声明时，基本所有的浏览器都是使用quirks mode呈现


window.innerWidth        //Firefox,Safari,Opera,Chrome,360 极速 文档内可编辑窗口尺寸
document.body.clientWidth;

offsetwidth  		对象包含的宽度 (包括边框，滚动条 总和的 宽度)

innerHTML    标签内容
outerHTML    标签内容（不刷新也可以更换内容）
className    CSS的class名字




查看/修改属性节点
getAttribute("属性名") 
setAttribute("属性名","属性值")
parentNode 	父节点
firstChild 	第一个
lastChild	最后一个

createElement（）	创建节点  
appendChild（）		末尾追加方式插入节点
insertBefore（）	在指定节点前插入新节点
cloneNode（）		克隆节点
removeChild（）		删除节点  
replaceChild( ) 	替换节点


\转义字符
\"         把双引号变成一个普通字符 不再是字符串开始结束

RegExp(正则表达式)


普通方式
var reg=/表达式/附加参数

var reg=/white/;
var reg=/white/g;

构造函数
var reg=new RegExp("表达式","附加参数")

var reg=new RegExp("white");
var reg=new RegExp("white","g");

附加参数
g:代表可以进行全局匹配
i：代表不区分大小写

RegExp对象的方法
test()
  检索字符串中指定的值，返回true或false

符号
[ ]	表示单个字符的“或”的关系，匹配方括号内任意一个字符。	如：/[abc]/可以匹配a、b、c中任意一个字符
[^]	用来匹配不在括号内的任意字符。				如：/[^abc]/可匹配除a、b、c外的其他任意字符
[0-9]	表示匹配从0-9任意的数字
/…/	代表一个模式的开始和结束
^	匹配字符串的开始
$	匹配字符串的结束
\s	任何空白字符
\S	任何非空白字符
\d	匹配一个数字字符，等价于[0-9]
\D	除了数字之外的任何字符，等价于[^0-9]
\w	匹配一个数字、下划线或字母字符，等价于[A-Za-z0-9_]
\W	任何非单字字符，等价于[^a-zA-z0-9_]
.	除了换行符之外的任意字符
限定符	作用			 	说 明
*	出现0次或连续多次  		/a*b/可匹配b,aab,aaaab……
+	出现至少一次			/a+b/可匹配ab,aaab,aaaab……
？	出现0次或者一次			/a[cd]?/可匹配a,ac,ad
{n}	连续出现n次			/a{3}/相当于aaa
{n,}	连续出现至少n次		 	/a{3,}/可匹配aaa,aaaa,……
{n,m}	连续出现至少n次，至多m次  	/ba{1,3}/可匹配ba,baa,baaa


简单的转义字符 
\r,\n		代表回车和换行符
\t		制表位
\\		表示'\'本身
\^		匹配^符号本身
\$		匹配$符号本身
\.		匹配小数点.本身

子匹配
|		左右两边表达式之间 "或" 关系，匹配左边或者右边
( )		在被修饰匹配次数的时候，括号中的表达式可以作为整体被修饰



文本框控件
value		设置或获取文本框的值
focus( )	获得焦点
select( )	选中文本内容，突出显示输入区域
onFocus		光标进入某个文本框脚本运行
onBlur		文本框失去焦点脚本运行


ajax
var 变量名=new XMLHttpRequest();

老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象：
var 变量名=new ActiveXObject("Microsoft.XMLHTTP");

open(method,url,async)		
规定请求的类型、URL 以及是否异步处理请求。method：请求的类型；GET 或 POSTurl：文件在服务器上的位置async：true（异步）或 false（同步）

send(string)
将请求发送到服务器。string：仅用于 POST 请求

onreadystatechange 事件
当请求被发送到服务器时，我们需要执行一些基于响应的任务。每当 readyState 改变时，就会触发 onreadystatechange 事件。readyState 属性存有 XMLHttpRequest 的状态信息。下面是 XMLHttpRequest 对象的三个重要的属性：

onreadystatechange
存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。

readyState
存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。
0: 请求未初始化
1: 服务器连接已建立
2: 请求已接收
3: 请求处理中
4: 请求已完成，且响应已就绪
	
status
200: "OK"
404: 未找到页面

json.parse() 解析json对象

除了IE10之外浏览器解决跨域方法
header("Access-Control-Allow-Origin: *") //*代表任何域。也可以指定地址

header("Access-Control-Allow-Methods: POST,GET") //支持的方法





占位符图片
<img src="holder.js/2000x200?text=111&random=yes&" class="img-responsive" > 


所有参数如下：
theme:主题。例如:holder.js/300x200?theme=sky
random:使用随机主题。例如:holder.js/300x200?random=yes
align:"center" , //对齐 left,center,right holder.js/300x200?align=left 并不是很好用，也不建议用，不配置默认居中就好
outline: //画出轮廓和对角线的占位符。例如:holder.js/300x200?outline=yes
lineWrap: //最大线长度宽度比形象。例如:holder.js/300x200?lineWrap=0.5 
============================================================================

//自定义皮肤示例：
Holder.addTheme("diy", {
   bg: "#eee",
   fg: "#999",
   size: 20,
   font: "微软雅黑",
   fontweight: "400",
});

bg: "#eee", //背景颜色 holder.js/300x200?bg=2a2025
fg: "#999", //字体颜色 holder.js/300x200?fg=ffffff
text: 文本, //文本 holder.js/300x200?text=Hello
size: 20, //字号 holder.js/300x200?text=Hello
font: "微软雅黑", //字体
fontweight: "400", //字体加粗程度，100-700可以尝试

//在指定区域调用：

比如咱要在 id="test" 这个区域加入占位符可以使用js代码 Holder.addImage("holder.js/200x100?theme=new", "#test").run() 这样插入

//在指定区域（#test）调用 示例：
Holder.addTheme("new", {
   fg: "#ccc",
   bg: "#000",
   size: 10
}).addImage("holder.js/200x100?theme=new", "#test").run();   		//没卵用


排序
正序sort()
	var array1=[0,1,2,5,10,15]
	function con(v1,v2){
		if(v1<v2){
			return -1;
		}else if(v1>v2){
			return 1;
		}else{
			return 0;
		}
	}
	array1.sort(con);
反相输出数组 不按顺序reverse()


删除当前元素
function()















