<meta name="viewport" content="width=device-width, initial-scale=1.0"> 
<meta name="viewport" content="width=device-width, initial-scale=1,maximum-scale=1, user-scalable=no">

 user-scalable=no 可以禁用其缩放（zooming）功能。

<meta name="viewport" content="width=device-width, initial-scale=1.0">
      <!-- 引入 Bootstrap -->
      <link href="http://cdn.static.runoob.com/libs/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
 
      <!-- HTML5 Shim 和 Respond.js 用于让 IE8 支持 HTML5元素和媒体查询 -->
      <!-- 注意： 如果通过 file://  引入 Respond.js 文件，则该文件无法起效果 -->
      <!--[if lt IE 9]>
         <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
         <script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"></script>
      <![endif]-->
	
<!-- jQuery文件。务必在bootstrap.min.js 之前引入 -->
<script src="http://cdn.static.runoob.com/libs/jquery/2.1.1/jquery.min.js"></script>
 
<!-- 最新的 Bootstrap 核心 JavaScript 文件 -->
<script src="http://cdn.static.runoob.com/libs/bootstrap/3.3.7/js/bootstrap.min.js"></script>

@media (min-width: 768px){ //>=768的设备 }
@media (max-width: 1199){ //<=1199的设备 }


第 2 章 排版样式

本节课我们主要学习一下 Bootstrap 全局 CSS 样式中的排版样式，包括了标题、页面主体、对齐、列表等常规内容。

一．页面排版
Bootstrap 提供了一些常规设计好的页面排版的样式供开发者使用。

1.页面主体
Bootstrap 将全局 font-size 设置为 14px，line-height 行高设置为 1.428(即
20px)；<p>段落元素被设置等于 1/2 行高(即 10px)；颜色被设置为#333。

//创建包含段落突出的文本
<p>Bootstrap 框架</p>
<p class="lead">Bootstrap 框架</p>
<p>Bootstrap 框架</p>
<p>Bootstrap 框架</p>
<p>Bootstrap 框架</p>

2.标题
//从 h1 到 h6
<h1>Bootstrap 框架</h1> //36px
<h2>Bootstrap 框架</h2> //30px
<h3>Bootstrap 框架</h3> //24px
<h4>Bootstrap 框架</h4> //18px
<h5>Bootstrap 框架</h5> //14px
<h6>Bootstrap 框架</h6> //12px

我们从 Firebug 查看元素了解到，Bootstrap 分别对 h1 ~ h6 进行了 CSS 样式的重构，
并且还支持普通内联元素定义 class=(.h1 ~ h6)来实现相同的功能。

//内联元素使用标题字体
<span class="h1">Bootstrap</span>

注：通过 Firebug 查看元素还看到，字体颜色、字体样式、行高均被固定了，从而保
证了统一性，而原生的会根据系统内置的首选字体决定，颜色是最黑色。
在 h1 ~ h6 元素之间，还可以嵌入一个 small 元素作为副标题，

//在标题元素内插入 small 元素
<h1>Bootstrap 框架 <small>Bootstrap 小标题</small></h1>
<h2>Bootstrap 框架 <small>Bootstrap 小标题</small></h2>
<h3>Bootstrap 框架 <small>Bootstrap 小标题</small></h3>
<h4>Bootstrap 框架 <small>Bootstrap 小标题</small></h4>
<h5>Bootstrap 框架 <small>Bootstrap 小标题</small></h5>
<h6>Bootstrap 框架 <small>Bootstrap 小标题</small></h6>

通过 Firebug 查看，我们发现 h1 ~ h3 下 small 元素的大小只占父元素的 65%，那么
通过计算(查看 Firebug 计算后的样式)，h1 ~ h3 下的 small 为 23.4px、19.5px、15.6px；
h4 ~ h6 下 small 元素的大小只占父元素的 75% ,分别为：13.5px、10.5px、9px。
在 h1 ~ h6 下的 small 样式也进行了改变，颜色变成淡灰色：#777，行高为 1，粗度
为 400。

3.内联文本元素
//添加标记，<mark>元素或.mark 类
	<p>Bootstrap<mark>框架</mark></p>
//各种加线条的文本
	<del>Bootstrap 框架</del> //删除的文本
	<s>Bootstrap 框架</s> //无用的文本
	<ins>Bootstrap 框架</ins> //插入的文本
	<u>Bootstrap 框架</u> //效果同上，下划线文本
//各种强调的文本
	<small>Bootstrap 框架</small> //标准字号的 85%
	<strong>Bootstrap 框架</strong> //加粗 700
	<em>Bootstrap 框架</em> //倾斜

4.对齐
//设置文本对齐
	<p class="text-left">Bootstrap 框架</p> //居左
	<p class="text-center">Bootstrap 框架</p> //居中
	<p class="text-right">Bootstrap 框架</p> //居右
	<p class="text-justify">Bootstrap 框架</p> //两端对齐，支持度不佳
	<p class="text-nowrap">Bootstrap 框架</p> //不换行

5.大小写
//设置英文文本大小写
	<p class="text-lowercase">Bootstrap 框架</p> //小写
	<p class="text-uppercase">Bootstrap 框架</p> //大写
	<p class="text-capitalize">Bootstrap 框架</p>//首字母大写

6.缩略语
//缩略语
	Bootstrap<abbr title="Bootstrap" class="initialism">框架</abbr>


7.地址文本
//设置地址，去掉了倾斜，设置了行高，底部 20px
	<address>
		<strong>Twitter, Inc.</strong><br>
		795 Folsom Ave, Suite 600<br>
		San Francisco, CA 94107<br>
		<abbr title="Phone">P:</abbr> (123) 456-7890
	</address>

8.引用文本
//默认样式引用，增加了做边线，设定了字体大小和内外边距
	<blockquote>
		Bootstrap 框架
	</blockquote>
//反向
	<blockquote class="blockquote-reverse ">
		Bootstrap 框架
	</blockquote>

9.列表排版
//移出默认样式
	<ul class="list-unstyled">
		<li>Bootstrap 框架</li>
		<li>Bootstrap 框架</li>
		<li>Bootstrap 框架</li>
		<li>Bootstrap 框架</li>
		<li>Bootstrap 框架</li>
	</ul>

//设置成内联
	<ul class="list-inline">
		<li>Bootstrap 框架</li>
		<li>Bootstrap 框架</li>
		<li>Bootstrap 框架</li>
		<li>Bootstrap 框架</li>
		<li>Bootstrap 框架</li>
	</ul>

//水平排列描述列表
	<dl class="dl-horizontal">
		<dt>Bootstrap</dt>
		<dd>Bootstrap 提供了一些常规设计好的页面排版的样式供开发者使用。</dd>
	
</dl>

10.代码
//内联代码
	<code>&lt;section&gt;</code>

//用户输入
	press <kbd>ctrl + ,</kbd>

//代码块
	<pre>&lt;p&gt;Please input...&lt;/p&gt;</pre>
	Bootstrap 还列举了<var>表示标记变量，<samp>表示程序输出，只不过没有重新复


第 3 章 表格和按钮

本节课我们主要学习一下 Bootstrap 表格和按钮功能，通过内置的 CSS 定义，显示各种丰富的效果。
一．表格
Bootstrap 提供了一些丰富的表格样式供开发者使用。

1.基本格式
//实现基本的表格样式
	<table class="table">


2.条纹状表格
//让<tbody>里的行产生一行隔一行加单色背景效果
	<table class="table table-striped">
注：表格效果需要基于基本格式.table

3.带边框的表格
//给表格增加边框
	<table class="table table-bordered">

4.悬停鼠标
//让<tbody>下的表格悬停鼠标实现背景效果
	<table class="table table-hover">

5.状态类
//可以单独设置每一行的背景样式
	<tr class="success">
注：一共五种不同的样式可供选择。

样式 说明
active 鼠标悬停在行或单元格上
success 标识成功或积极的动作
info 标识普通的提示信息或动作
warning 标识警告或需要用户注意
danger 表示危险或潜在的带来负面影响的动作

6.隐藏某一行
//隐藏行
	<tr class="sr-only">

7.响应式表格
//表格父元素设置响应式，小于 768px 出现边框
	<body class="table-responsive">


二．按钮
Bootstrap 提供了很多丰富按钮供开发者使用。
1.可作为按钮使用的标签或元素
//转化成普通按钮
	<a href="###" class="btn btn-default">Link</a>
	<button class="btn btn-default">Button</button>
	<input type="button" class="btn btn-default" value="input">

注意事项有三点：
(1).针对组件的注意事项
虽然按钮类可以应用到 <a> 和 <button> 元素上，但是，导航和导航条组件只支持
<button> 元素。

(2).链接被作为按钮使用时的注意事项
如果 <a> 元素被作为按钮使用 -- 并用于在当前页面触发某些功能 -- 而不是用于
链接其他页面或链接当前页面中的其他部分，那么，务必为其设置 role="button" 属性。

(3).跨浏览器展现
我们总结的最佳实践是：强烈建议尽可能使用 <button> 元素来获得在各个浏览器上
获得相匹配的绘制效果。
另外，我们还发现了 Firefox <30 版本的浏览器上出现的一个 bug，其表现是：阻
止我们为基于 <input> 元素所创建的按钮设置 line-height 属性，这就导致在
Firefox 浏览器上不能完全和其他按钮保持一致的高度。

2.预定义样式
//一般信息
	<button class="btn btn-info">Button</button>
样式 说明
	btn-default 默认样式
	btn-success 成功样式
	btn-info 一般信息样式
	btn-warning 警告样式
	btn-danger 危险样式
btn-primary 首选项样式
	btn-link 链接样式

3.尺寸大小
//从大到小的尺寸
	<button class="btn btn-lg">Button</button>
	<button class="btn">Button</button>
	<button class="btn btn-sm">Button</button>
	<button class="btn btn-xs">Button</button>

4.块级按钮
//块级换行
	<button class="btn btn-block">Button</button>
	<button class="btn btn-block">Button</button>

5.激活状态
//激活按钮
	<button class="btn active">Button</button>

6.禁用状态
//禁用按钮
	<button class="btn active disabled">Button</button>



第 4 章 表单和图片

本节课我们主要学习一下 Bootstrap 表单和图片功能，通过内置的 CSS 定义，显示各种丰富的效果。

一．表单
Bootstrap 提供了一些丰富的表单样式供开发者使用。
1.基本格式
//实现基本的表单样式
	<form>
		<div class="form-group">
			<label>电子邮件</label>
			<input type="email" class="form-control" placeholder="请输入您的电子邮件">
		</div>
		<div class="form-group">
			<label>密码</label>
			<input type="password" class="form-control" placeholder="请输入您的密码">
		</div>
	</form>

注：只有正确设置了输入框的 type 类型，才能被赋予正确的样式。支持的输入框控件
包括：text、password、datetime、datetime-local、date、month、time、week、
number、email、url、search、tel 和 color。

2.内联表单
//让表单左对齐浮动，并表现为 inline-block 内联块结构
	<form class="form-inline">
注：当小于 768px，会恢复独占样式

3.表单合组
//前后增加片段
	<div class="input-group">
		<div class="input-group-addon">￥</div>
		<input type="text" class="form-control">
		<div class="input-group-addon">.00</div>
	
</div>

4.水平排列
//让表单内的元素保持水平排列
	<form class="form-horizontal">
		<div class="form-group">
			<label class="col-sm-2 control-label">电子邮件</label>
			<div class="col-sm-10">
				<input type="email" class="form-control" placeholder="请输入您的电子邮件">
			</div>
		</div>
	</form>
注：这里用到了 col-sm 栅格系统，后面章节会重点讲解，而 control-label 表示和
父元素样式同步。

5.复选框和单选框
//设置复选框，在一行
	<div class="checkbox">
		<label>
			<input type="checkbox">体育
		</label>
	</div>
	<div class="checkbox">
		<label>
			<input type="checkbox">音乐
		</label>
	</div>

//设置禁用的复选框
	<div class="checkbox disabled">
		<label>
			<input type="checkbox" disabled>音乐
		</label>
	</div>

//设置内联一行显示的复选框
	<label class="checkbox-inline">
		<input type="checkbox">体育
	</label>
	<label class="checkbox-inline disabled">
		<input type="checkbox" disabled>音乐
	</label>
//设置单选框
	<div class="radio disabled">
		<label>
			<input type="radio" name="sex" disabled>男
		</label>
	</div>

6.下拉列表
//设置下拉列表
	<select class="form-control">
		<option>1</option>
		<option>2</option>
		<option>3</option>
		<option>4</option>
		<option>5</option>
	</select>

7.校验状态
//设置为错误状态
	<div class="form-group has-error">
注：还有其他状态如下

样式 说明
has-error 错误状态
has-success 成功状态
has-warning 警告状态

//label 标签同步相应状态
	<label class="control-label">Input with success</label>

8.添加额外的图标
//文本框右侧内置文本图标
	<div class="form-group has-feedback">
		<label>电子邮件</label>
		<input type="email" class="form-control">
		<span class="glyphicon glyphicon-ok form-control-feedback"></span>
	</div>
注：除了 glyphicon-ok 外，还有几个如下表：
样式 说明
glyphicon-ok 成功状态
glyphicon-warning-sign 警告状态
glyphicon-remove 错误状态


9.控制尺寸
//从大到小
	<input type="password" class="form-control input-lg">
	<input type="password" class="form-control">
	<input type="password" class="form-control input-sm">
注：也可以设置父元素 form-group-lg、form-group-sm，来调整。


二．图片
Bootstrap 提供了一些丰富的图片样式供开发者使用。
1.图片形状
//三种形状
	<img src="img/pic.png" alt="图片" class="img-rounded">
	<img src="img/pic.png" alt="图片" class="img-circle">
	<img src="img/pic.png" alt="图片" class="img-thumbnail">
//响应式图片
	<img src="img/pic.png" alt="图片" class="img-responsive">



第 5 章 栅格系统

本节课我们主要学习一下 Bootstrap 的栅格系统，提供了一套响应式、移动设备优先的流式栅格系统。

 一．移动设备优先
在 HTML5 的项目中，我们做了移动端的项目。它有一份非常重要的 meta，用于设置屏
幕和设备等宽以及是否运行用户缩放，及缩放比例的问题。

//分别为：屏幕宽度和设备一致、初始缩放比例、最大缩放比例和禁止用户缩放
<meta name="viewport" content="width=device-width, initial-scale=1,maximum-scale=1, user-scalable=no">

二．布局容器
Bootstrap 需要为页面内容和栅格系统包裹一个.container 容器。由于 padding 等
属性的原因，这两种容器类不能相互嵌套。

//固定宽度
	<div class="container">
		...
	</div>

//100%宽度
	<div class="container-fluid">
		...
	</div>

栅格系统中，浏览器会随着屏幕的大小的增减自动分配最多12列。
通过一系列的行(row)与列(column)的组合来创建页面布局。工作原理如下：
1.“行（row）”必须包含在 .container （固定宽度）或 .container-fluid （100%
宽度）中，以便为其赋予合适的排列（aligment）和内补（padding）。

2.通过“行（row）”在水平方向创建一组“列（column）”。

3.你的内容应当放置于“列（column）”内，并且，只有“列（column）”可以作为
行（row）”的直接子元素。

4.类似 .row 和 .col-xs-4 这种预定义的类，可以用来快速创建栅格布局。
Bootstrap 源码中定义的 mixin 也可以用来创建语义化的布局。

5.通过为“列（column）”设置 padding 属性，从而创建列与列之间的间隔（gutter）。
通过为 .row 元素设置负值 margin 从而抵消掉为 .container 元素设置的 padding，
也就间接为“行（row）”所包含的“列（column）”抵消掉了 padding。

6.负值的 margin 就是下面的示例为什么是向外突出的原因。在栅格列中的内容排成一行。

7.栅格系统中的列是通过指定 1 到 12 的值来表示其跨越的范围。例如，三个等宽的列可以使用三个 .col-xs-4 来创建。

8.如果一“行（row）”中包含了的“列（column）”大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列。


行（row）列col
超小屏幕 手机 (<768px)		.col-xs-
小屏幕 平板 (≥768px)		.col-sm-
中等屏幕 桌面显示器 (≥992px)	.col-md-
大屏幕 大桌面显示器 (≥1200px)	.col-lg-


9.栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ， 并且针对小屏幕设备覆
盖栅格类。 因此，在元素上应用任何 .col-md-* 栅格类适用于与屏幕宽度大于或等于分
界点大小的设备 ，并且针对小屏幕设备覆盖栅格类。因此，在元素上应用任何 .col-lg-*
不存在， 也影响大屏幕设备。

//创建一个响应式行
	<div class="container">
		<div class="row">
			...
		</div>
	</div>

//创建最多 12 列的响应式行

	//为了显示明显的 CSS
	.a {
		height: 100px;
		background-color: #eee;
		border:1px solid #ccc;
	}
	<div class="container">
		<div class="row">
			<div class="col-md-1 a">1</div>
			<div class="col-md-1 a">2</div>
			<div class="col-md-1 a">3</div>
			<div class="col-md-1 a">4</div>
			<div class="col-md-1 a">5</div>
			<div class="col-md-1 a">6</div>
			<div class="col-md-1 a">7</div>
			<div class="col-md-1 a">8</div>
			<div class="col-md-1 a">9</div>
			<div class="col-md-1 a">10</div>
			<div class="col-md-1 a">11</div>
			<div class="col-md-1 a">12</div>
		</div>
	</div>





//总列数都是 12，每列分配多列
	<div class="container">
		<div class="row">
			<div class="col-md-4 a">1-4</div>
			<div class="col-md-4 a">5-8</div>
			<div class="col-md-4 a">9-12</div>
		</div>
		<div class="row">
			<div class="col-md-8 a">1-8</div>
			<div class="col-md-4 a">9-12</div>
		</div>
	</div>

栅格参数表
如上图所示，栅格系统最外层区分了四种宽度的浏览器：超小屏(<768px)、小屏(>=768px)、中屏(>=992px)和大屏(>=1200px)。
而内层.container 容器的自适应宽度为：自动、750px、970px 和 1170px。自动的意思为，如果你是手机屏幕，则全面独占一行显示。
//四种屏幕分类全部激活
	<div class="container">
		<div class="row">
			<div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 a">4</div>
			<div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 a">4</div>
			<div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 a">4</div>
			<div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 a">4</div>
			<div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 a">4</div>
			<div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 a">4</div>
			<div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 a">4</div>
			<div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 a">4</div>
			<div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 a">4</div>
			<div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 a">4</div>

			<div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 a">4</div>
			<div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 a">4</div>
		</div>
	</div>

//有时我们可以设置列偏移，让中间保持空隙
	<div class="container">
		<div class="row">
			<div class="col-md-8 a">8</div>
			<div class="col-md-3 col-md-offset-1 a">3</div>
		</div>
	</div>

//也可以嵌套，嵌满也是 12 列
	<div class="container">
		<div class="row">
			<div class="col-md-9 a">
				<div class="col-md-8 a">1-8</div>
				<div class="col-md-4 a">9-12</div>
			</div>
			<div class="col-md-3 a">11-12</div>
		</div>
	</div>

//可以把两个列交换位置，push 向左移动，pull 向右移动
	<div class="container">
		<div class="row">
			<div class="col-md-9 col-md-push-3 a">9</div>
			<div class="col-md-3 col-md-pull-9 a">3</div>
		</div>
	</div>

媒体查询
在栅格系统中，我们在 Less 文件中使用以下媒体查询（media query）来创建关键的分界点阈值。

/* 超小屏幕（手机，小于 768px） */
/* 没有任何媒体查询相关的代码，因为这在 Bootstrap 中是默认的（还记得 Bootstrap 是移动设备优先的吗？） */

/* 小屏幕（平板，大于等于 768px） */
@media (min-width: @screen-sm-min) { ... }

/* 中等屏幕（桌面显示器，大于等于 992px） */
@media (min-width: @screen-md-min) { ... }

/* 大屏幕（大桌面显示器，大于等于 1200px） */
@media (min-width: @screen-lg-min) { ... }
我们偶尔也会在媒体查询代码中包含 max-width 从而将 CSS 的影响限制在更小范围的屏幕大小之内。


@media screen and (min-width: 325px) and (max-width: 425px) { 
	.container-fluid .row .col-xs-4 p{font-size: 1em !important}
	.container-fluid .row .col-xs-4 h4{font-size: 2em!important} 
}
@media screen and (min-width: 426px) and (max-width: 768px) { 
	.container-fluid .row .col-xs-4 p{font-size: 2em !important}
	.container-fluid .row .col-xs-4 h4{font-size: 4em!important} 
}

第 6 章 辅组类和响应式工具

本节课我们主要学习一下 Bootstrap 的辅组类和响应式工具。

辅助类提供了一组类来辅组页面设计，而响应式工具则利用媒体查询显示或隐藏某些内容。

 一．辅助类
Bootstrap 在布局方面提供了一些细小的辅组样式，用于文字颜色以及背景色的设置、显示关闭图标等等。

1.情景文本颜色
样式列表
样式名 描述
	text-muted 柔和灰
	text-primary 主要蓝
	text-success 成功绿
	text-info 信息蓝
	text-warning 警告黄
	text-danger 危险红

//各种色调的字体
	<p class="text-muted">Bootstrap 视频教程</p>
	<p class="text-primary">Bootstrap 视频教程</p>
	<p class="text-success">Bootstrap 视频教程</p>
	<p class="text-info">Bootstrap 视频教程</p>
	<p class="text-warning">Bootstrap 视频教程</p>
	<p class="text-danger">Bootstrap 视频教程</p>

2.情景背景色
样式列表
	bg-primary 主要蓝
	bg-success 成功绿
	bg-info 信息蓝
	bg-warning 警告黄
bg-danger 危险红

//各种色调的背景
	<p class="bg-primary">Bootstrap 视频教程</p>
	<p class="bg-success">Bootstrap 视频教程</p>
	<p class="bg-info">Bootstrap 视频教程</p>
	<p class="bg-warning">Bootstrap 视频教程</p>
	<p class="bg-danger">Bootstrap 视频教程</p>

3.关闭按钮
	<button type="button" class="close">&times;</button>

4.三角符号
	<span class="caret"></span>

5.快速浮动
	<div class="pull-left">左边</div>
	<div class="pull-right">右边</div>
注：这个浮动其实就是 float，只不过使用了!important 加强了优先级。

6.块级居中
	<div class="center-block">居中</div>
注：就是 margin:x auto；并且设置了 display:block;。

7.清理浮动
	<div class="clearfix"></div>
注：这个 div 可以放在需要清理浮动区块的前面即可。

8.显示和隐藏
	<div class="show">show</div>
	<div class="hidden">hidden</div>


二．响应式工具
在媒体查询时，针对不同的屏幕大小，有时需要显示和隐藏部分内容。响应式工具类，就提供了这种解决方案。


		超小屏幕手机 (<768px)	小屏幕平板 (≥768px)	中等屏幕桌面 (≥992px)	大屏幕桌面 (≥1200px)
.visible-xs-*		可见			隐藏			隐藏			隐藏
.visible-sm-*		隐藏			可见			隐藏			隐藏
.visible-md-*		隐藏			隐藏			可见			隐藏
.visible-lg-*		隐藏			隐藏			隐藏			可见
.hidden-xs		隐藏			可见			可见			可见
.hidden-sm		可见			隐藏			可见			可见
.hidden-md		可见			可见			隐藏			可见
.hidden-lg		可见			可见			可见			隐藏

//超小屏幕激活显示
	<div class="visible-xs-block">Bootstrap</div>

//超小屏幕激活隐藏
	<div class="hidden-xs">Bootstrap</div>

注：对于显示的内容，有三种变体，分别为：block、inline-block、inline。


第 7 章 图标菜单按钮组件

本节课我们主要学习一下 Bootstrap 的三个组件功能：小图标组件、下拉菜单组件和各种按钮组件。

一．小图标组件
Bootstrap 提供了免费的 263 个小图标（数了两次），具体可以参考中文官网的组件链接：http://v3.bootcss.com/components/#glyphicons。部分图标如下：

可以使用<i>或<span>标签来配合使用，具体如下：
//使用小图标
	<i class="glyphicon glyphicon-star"></i>
	<span class="glyphicon glyphicon-star"></span>

//也可以结合按钮
	<button class="btn btn-default btn-lg">
		<span class="glyphicon glyphicon-star"></span>
	</button>

	<button class="btn btn-default btn">
		<span class="glyphicon glyphicon-star"></span>
	</button>
	<button class="btn btn-default btn-sm">
		<span class="glyphicon glyphicon-star"></span>
	</button>
	<button class="btn btn-default btn-xs">
		<span class="glyphicon glyphicon-star"></span>
	</button>

二．下拉菜单组件
下拉菜单，就是点击一个元素或按钮，触发隐藏的列表显示出来。
//基本格式
	<div class="dropdown">
		<button class="btn btn-default" data-toggle="dropdown">
			下拉菜单
			<span class="caret"></span>
		</button>
		<ul class="dropdown-menu">
			<li><a href="#">首页</a></li>
			<li><a href="#">资讯</a></li>
			<li><a href="#">产品</a></li>
			<li><a href="#">关于</a></li>
		</ul>
	</div>

按钮和菜单需要包裹在.dropdown 的容器里，
而作为被点击的元素按钮需要设置data-toggle="dropdown"才能有效。
对于菜单部分，设置 class="dropdown-menu"才能自动隐藏并添加固定样式。
设置 class="caret"表示箭头，可上可下。

//设置向上触发
	<div class="dropup">

//菜单项居右对齐，默认值是 dropdown-menu-left
	<ul class="dropdown-menu dropdown-menu-right">

//设置菜单的标题，不要加超链接
	<li class="dropdown-header">网站导航</li>

//设置菜单的分割线
	<li class="divider"></li>

//设置菜单的禁用项
	<li class="disabled"><a href="#">产品</a></li>


//让菜单默认显示
	<div class="dropdown open">

三．按钮组组件
按钮组就是多个按钮集成在一个容器里形成独有的效果。
//基本格式
	<div class="btn-group">
		<button type="button" class="btn btn-default">左</button>
		<button type="button" class="btn btn-default">中</button>
		<button type="button" class="btn btn-default">右</button>
	</div>

//将多个按钮组整合起来便于管理
	<div class="btn-toolbar">
		<div class="btn-group">
			<button type="button" class="btn btn-default">左</button>
			<button type="button" class="btn btn-default">中</button>
			<button type="button" class="btn btn-default">右</button>
		</div>
		<div class="btn-group">
			<button type="button" class="btn btn-default">1</button>
			<button type="button" class="btn btn-default">2</button>
			<button type="button" class="btn btn-default">3</button>
		</div>
	</div>

//设置按钮组大小
	<div class="btn-group btn-group-lg">
	<div class="btn-group>
	<div class="btn-group btn-group-sm">
	<div class="btn-group btn-group-xs">

//嵌套一个分组，比如下拉菜单
	<div class="btn-group">
		<button type="button" class="btn btn-default">左</button>
		<button type="button" class="btn btn-default">中</button>
		<button type="button" class="btn btn-default">右</button>
		<div class="btn-group">
			<button class="btn btn-default dropdown-toggle"data-toggle="dropdown">
				下拉菜单
				<span class="caret"></span>
			</button>

			<ul class="dropdown-menu">
				<li><a href="#">首页</a></li>
				<li><a href="#">资讯</a></li>
				<li><a href="#">产品</a></li>
				<li><a href="#">关于</a></li>
			</ul>
		</div>
	</div>
注意：这里<div>中并没有实现 class="dropdown"，通过源码分析知道嵌套本身已经有定位就不需要再设置。而右边的圆角只要多加一个 class="dropdown-toggle"即可。


//设置按钮组垂直排列
	<div class="btn-group-vertical">

//设置两端对齐按钮组，使用<a>标签
	<div class="btn-group-justified">
		<a type="button" class="btn btn-default">左</a>
		<a type="button" class="btn btn-default">中</a>
		<a type="button" class="btn btn-default">右</a>
	</div>

//如果需要使用<button>标签，则需要对每个按钮进行群组
	<div class="btn-group-justified">
		<div class="btn-group">
			<button type="button" class="btn btn-default">左</button>
		</div>
		<div class="btn-group">
			<button type="button" class="btn btn-default">中</button>
		</div>
		<div class="btn-group">
			<button type="button" class="btn btn-default">右</button>
		</div>
	</div>

四．按钮式下拉菜单
这个下拉菜单其实和第二个知识点一样，只不过，这个是在群组里，不需要<div>声明class="dropdown"。

//群组按钮下拉菜单
	<div class="btn-group">
		<button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
		下拉菜单
		<span class="caret"></span>
</button>
		<ul class="dropdown-menu">
			<li><a href="#">首页</a></li>
			<li><a href="#">资讯</a></li>
			<li><a href="#">产品</a></li>
			<li><a href="#">关于</a></li>
		</ul>
	</div>

//分裂式按钮下拉菜单
	<div class="btn-group">
		<button type="button" class="btn btn-default">下拉菜单</button>
		<button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
			<span class="caret"></span>
		</button>
		<ul class="dropdown-menu">
			<li><a href="#">首页</a></li>
			<li><a href="#">资讯</a></li>
			<li><a href="#">产品</a></li>
			<li><a href="#">关于</a></li>
		</ul>
	</div>

//向上弹出式
	<div class="btn-group dropup">




第 8 章 输入框和导航组件

本节课我们主要学习一下Bootstrap的两个个组件功能：输入框组件和导航导航条组件。

一．输入框组件
文本输入框就是可以在<input>元素前后加上文字或按钮，可以实现对表单控件的扩展。

//在左侧添加文字
	<div class="input-group">
		<span class="input-group-addon">@</span>
		<input type="text" class="form-control">
	</div>

//在右侧添加文字
	<div class="input-group">
		<input type="text" class="form-control">
		<span class="input-group-addon">@163.com</span>
	</div>

//在两侧添加文字
	<div class="input-group">
		<span class="input-group-addon">$</span>
		<input type="text" class="form-control">
		<span class="input-group-addon">.00</span>
	</div>

//设置尺寸，另外三种分别是默认、xs、sm
	<div class="input-group input-group-lg">

//左侧使用复选框和单选框
	<div class="input-group">
		<span class="input-group-addon"><input type="checkbox"></span>
		<input type="text" class="form-control">
	</div>

	<div class="input-group">
		<span class="input-group-addon"><input type="radio"></span>
		<input type="text" class="form-control">
	</div>

//左侧使用按钮
	<div class="input-group">
		<span class="input-group-btn">
			<button type="button" class="btn btn-default">按钮</button>
		</span>
		<input type="text" class="form-control">
	</div>

//左侧使用下拉菜单或分列式
	<div class="input-group">
		<span class="input-group-btn">
			<button class="btn btn-default dropdown-toggle" data-toggle="dropdown">
				下拉菜单
				<span class="caret"></span>
			</button>
			<ul class="dropdown-menu">
				<li class="dropdown-header">网站导航</li>
				<li><a href="#">首页</a></li>
				<li><a href="#">资讯</a></li>
				<li class="divider"><a href="#">产品</a></li>
				<li class="disabled"><a href="#">关于</a></li>
			</ul>
		</span>
		<input type="text" class="form-control">
	</div>

二．导航组件
Bootstrap 提供了一组导航组件，用于实现 Web 页面的栏目操作。
//基本导航标签页
	<ul class="nav nav-tabs">
		<li class="active"><a href="#">首页</a></li>
		<li><a href="#">资讯</a></li>
		<li><a href="#">产品</a></li>
		<li><a href="#">关于</a></li>
	</ul>

//胶囊式导航
	<ul class="nav nav-pills">


//垂直胶囊式导航
	<ul class="nav nav-pills nav-stacked">

//导航两端对齐
	<ul class="nav nav-tabs nav-justified">

//禁用导航中的项目
	<li class="disabled"><a href="#">关于</a></li>

//带下拉菜单的导航
	<ul class="nav nav-tabs">
		<li class="active"><a href="#">首页</a></li>
		<li><a href="#">资讯</a></li>
		<li class="dropdown">
			<a href="#" class="dropdown-toggle" data-toggle="dropdown">
				下拉菜单
				<span class="caret"></span>
			</a>
			<ul class="dropdown-menu">
				<li><a href="#">菜单一</a></li>
				<li><a href="#">菜单二</a></li>
			</ul>
		</li>
	</ul>

三．导航条组件
导航条是网站中作为导航页头的响应式基础组件。
//基本格式
	<nav class="navbar navbar-default">
		...
	</nav>

//反色调导航
	<nav class="navbar navbar-inverse">
		...
	</nav>

//基本导航条，包含标题和列表
	<nav class="navbar navbar-default">
		<div class="container">
			<div class="navbar-header">
				<a href="#" class="navbar-brand">标题</a>
			</div>
			
<ul class="nav navbar-nav">
				<li class="active"><a href="#">首页</a></li>
				<li><a href="#">资讯</a></li>
				<li class="disabled"><a href="#">产品</a></li>
				<li><a href="#">关于</a></li>
			</ul>
		</div>
	</nav>

//导航条中使用表单
	<form action="" class="navbar-form navbar-left">
		<div class="input-group">
			<input type="text" class="form-control">
			<span class="input-group-btn">
				<button type="submit" class="btn btn-default">提交</button>
			</span>
		</div>
	</form>

//导航中使用按钮
	<button class="btn btn-default navbar-btn">按钮</button>

//导航中使用对齐方式，left 和 right
	<button class="btn btn-default navbar-btn navbar-right">按钮</button>

//导航中使用一段文本
	<p class="navbar-text">我是一段文本</p>

//非导航链接，一般需要置入文本区域内
	<a href="#" class="navbar-link">非导航链接</a>

//将导航固定在顶部，下面的内容会自动上移
	<nav class="navbar navbar-default navbar-fixed-top">

//将导航补丁在底部
	<nav class="navbar navbar-default navbar-fixed-bottom">

//静态导航，和页面等宽的导航条，去掉了圆角
	<nav class="navbar navbar-default navbar-static-top">




第 9 章 路径分页标签和徽章组件

本节课我们主要学习一下 Bootstrap 的四个组件功能：路径组件、分页组件、标签组件和徽章组件。

一．路径组件
路径组件也叫做面包屑导航。
//面包屑导航
	<ol class="breadcrumb">
		<li><a href="#">首页</a></li>
		<li><a href="#">产品列表</a></li>
		<li class="active">韩版 2015 年羊绒毛衣</li>
	</ol>

二．分页组件
分页组件可以提供带有展示页面的功能。
//默认分页
	<ul class="pagination">
		<li><a href="#">&laquo;</a></li>
		<li><a href="#">1</a></li>
		<li><a href="#">2</a></li>
		<li><a href="#">3</a></li>
		<li><a href="#">4</a></li>
		<li><a href="#">5</a></li>
		<li><a href="#">&raquo;</a></li>
	</ul>

//首选项和禁用
	<li class="active"><a href="#">1</a></li>
	<li class="disabled"><a href="#">2</a></li>

//设置尺寸，四种 lg、默认、sm 和 xs
	<ul class="pagination pagination-lg">


//翻页效果
	<ul class="pager">
		<li><a href="#">上一页</a></li>
		<li><a href="#">下一页</a></li>
	</ul>

//对齐翻页链接
	<ul class="pager">
		<li class="previous"><a href="#">上一页</a></li>
		<li class="next"><a href="#">下一页</a></li>
	</ul>

//翻页项禁用
	<li class="previous disabled"><a href="#">上一页</a></li>

三．标签
//在文本后面带上标签
	<h3>标签 <span class="label label-default">new</span></h3>

//不同色调的标签
	<h3>标签 <span class="label label-primary">new</span></h3>
	<h3>标签 <span class="label label-success">new</span></h3>
	<h3>标签 <span class="label label-info">new</span></h3>
	<h3>标签 <span class="label label-warning">new</span></h3>
	<h3>标签 <span class="label label-danger">new</span></h3>

四．徽章
//未读信息数量徽章
	<a href="#">信息 <span class="badge">10</span></a>

//按钮中使用徽章
	<button class="btn btn-success">
		提交 <span class="badge">3</span>
	</button>

//激活状态自动适配色调
	<ul class="nav nav-pills">
		<li class="active">
			<a href="#">首页 <span class="badge">2</span></a>
		</li>
		<li><a href="#">资讯</a></li>
	</ul>





第 10 章 巨幕页头缩略图和警告框组件

本节课我们主要学习一下 Bootstrap 的四个组件功能：巨幕组件、页头组件、缩略图组件和警告框组件。

一．巨幕组件
巨幕组件主要是展示网站的关键性区域。
//在固定的范围内，有圆角
	<div class="container">
		<div class="jumbotron">
			<h2>网站标题</h2>
			<p>这是一个学习性的网站！</p>
			<p><a href="#" class="btn btn-default">更多内容</a></p>
		</div>
	</div>

//100%全屏，没有圆角
	<div class="jumbotron">
		<div class="container">
			<h2>网站标题</h2>
			<p>这是一个学习性的网站！</p>
			<p><a href="#" class="btn btn-default">更多内容</a></p>
		</div>
	</div>

二．页头组件
//增加一些空间
	<div class="page-header">
		<h1>大标题 <small>小标题</small></h1>
	</div>

三．缩略图组件
//缩略图配合响应式
	<div class="container">

		<div class="row">
			<div class="col-xs-6 col-md-3 col-sm-4">
				<div class="thumbnail">
					<img src="img/pic.png" alt="">
				</div>
			</div>

			<div class="col-xs-6 col-md-3 col-sm-4">
				<div class="thumbnail">
					<img src="img/pic.png" alt="">
				</div>
			</div>

			<div class="col-xs-6 col-md-3 col-sm-4">
				<div class="thumbnail">
					<img src="img/pic.png" alt="">
				</div>
			</div>

			<div class="col-xs-6 col-md-3 col-sm-4">
				<div class="thumbnail">
					<img src="img/pic.png" alt="">
				</div>
			</div>
		</div>
	</div>

//自定义内容
	<div class="container">
		<div class="row">
			<div class="col-xs-6 col-md-3 col-sm-4">
				<div class="thumbnail">
					<img src="img/pic.png" alt="">
					<div class="caption">
					<h3>图文并茂</h3>
					<p>这是一个图片结合文字的缩略图</p>
					<p><a href="#" class="btn btn-default">进入</a></p>
				</div>
			</div>
		</div>
		<div class="col-xs-6 col-md-3 col-sm-4">
			<div class="thumbnail">
				<img src="img/pic.png" alt="">
				<div class="caption">
					<h3>图文并茂</h3>
					<p>这是一个图片结合文字的缩略图</p>
					<p><a href="#" class="btn btn-default">进入</a></p>
</div>
				</div>
			</div>
			<div class="col-xs-6 col-md-3 col-sm-4">
				<div class="thumbnail">
					<img src="img/pic.png" alt="">
					<div class="caption">
						<h3>图文并茂</h3>
						<p>这是一个图片结合文字的缩略图</p>
						<p><a href="#" class="btn btn-default">进入</a></p>
					</div>
				</div>
			</div>
			<div class="col-xs-6 col-md-3 col-sm-4">
				<div class="thumbnail">
					<img src="img/pic.png" alt="">
					<div class="caption">
						<h3>图文并茂</h3>
						<p>这是一个图片结合文字的缩略图</p>
						<p><a href="#" class="btn btn-default">进入</a></p>
					</div>
				</div>
			</div>
		</div>
	</div>

四．警告框组件
警告框组件是一组预定义消息。
//基本警告框
		<div class="alert alert-success">Bootstrap</div>
		<div class="alert alert-info">Bootstrap</div>
		<div class="alert alert-warning">Bootstrap</div>
		<div class="alert alert-danger">Bootstrap</div>

//带关闭的警告框
	<div class="alert alert-success">
		Bootstrap
		<button type="button" class="close" data-dismiss="alert">
			<span>&times;</span>
		</button>
	</div>


//自动适配的超链接
	<div class="alert alert-success">
		Bootstrap，请到官网
		<a href="#" class="alert-link">下载</a>
	</div>


第 11 章 进度条媒体对象和 Well 组件

本节课我们主要学习一下 Bootstrap 的三个组件功能：Well 组件、进度条组件、媒体对象组件。
一．Well 组件
这个组件可以实现简单的嵌入效果。
//嵌入效果
	<div class="well">
		Bootstrap
	</div>

//有 lg 和 sm 两种可选值
	<div class="well well-lg">
		Bootstrap
	</div>

二．进度条组件
进度条组件为当前工作流程或动作提供时时反馈。
//基本进度条
	<div class="progress">
		<div class="progress-bar" style="width: 60%;">60%</div>
	</div>

//最低值进度条
	<div class="progress">
		<div class="progress-bar" style="min-width:20px">0%</div>
	</div>

//结合情景的进度条
	<div class="progress">
		<div class="progress-bar progress-bar-success" style="min-width:20px;width:60%">60%</div>
	</div>


//条纹状，IE10+支持
	<div class="progress">
		<div class="progress-bar progress-bar-success progress-bar-striped" style="min-width:20px;width:60%">60%</div>
	</div>

//动画效果
	<div class="progress">
		<div class="progress-bar progress-bar-success progress-bar-striped active" style="min-width:20px;width:60%">60%</div>
	</div>

//堆叠效果
	<div class="progress">
		<div class="progress-bar progress-bar-success" style="min-width:20px;width:35%">35%</div>
		<div class="progress-bar progress-bar-warning" style="min-width:20px;width:20%">20%</div>
		<div class="progress-bar progress-bar-danger"  style="min-width:20px;width:10%">10%</div>
	</div>

三．媒体对象组件
媒体对象可以包含图片、视频或音频等媒体，以达到对象和文本组合显示的样式效果。
//基本实例
	<div class="media">
		<div class="media-left  media-middle">
			<img src="img/small.png" alt="" class="media-object">
		</div>
		<div class="media-body">
			<h4 class="media-heading">标题</h4>
			<p>企鹅</p>
		</div>
	</div>

//媒体对象在右边
	<div class="media">
		<div class="media-body">
			<h4 class="media-heading">标题</h4>
			
<p>企鹅</p>
		</div>
		<div class="media-right">
			<img src="img/small.png" alt="" class="media-object">
		</div>
	</div>

//媒体对象列表
	
<ul class="media-list">
	<li class="meida">

		<div class="media-left">
			<img src="img/small.png" alt="" class="media-object">
		</div>
		<div class="media-body">
			<h4 class="meida-heading">内容标题</h4>
			<p>企鹅</p>

			<div class="meida">
				<div class="media-left">
					<img src="img/small.png" alt="" class="media-object">
				</div>
				<div class="media-body">
					<h4 class="meida-heading">内容标题</h4>
					<p>企鹅</p>

					<div class="meida">
						<div class="media-left">
							<img src="img/small.png" alt="" class="media-object">
						</div>

						<div class="media-body">
							<h4 class="meida-heading">内容标题</h4>
							<p>企鹅</p>
						</div>
					</div>
				</div>
			</div>

			<div class="meida">
				<div class="media-left">
					<img src="img/small.png" alt="" class="media-object">
				</div>
				<div class="media-body">
					<h4 class="meida-heading">内容标题</h4>
					<p>企鹅</p>
				</div>
			</div>
		</div>
	</li>
	<li class="meida">
		<div class="media-left">
			<img src="img/small.png" alt="" class="media-object">
		</div>
		<div class="media-body">
			<h4 class="meida-heading">内容标题</h4>
			<p>企鹅</p>
		</div>
	</li>
</ul>



第 12 章 列表组面板和嵌入组件

本节课我们主要学习一下 Bootstrap 的三个组件功能：列表组组件、面板组件、 响应式嵌入组件。
一．列表组组件
列表组组件用于显示一组列表的组件。

//基本实例
	<ul class="list-group">
		<li class="list-group-item">1.这是起始</li>
		<li class="list-group-item">2.这是第二条数据</li>
		<li class="list-group-item">3.这是第三排信息</li>
		<li class="list-group-item">4.这是末尾</li>
	</ul>

//列表项带勋章
	<li class="list-group-item">
		1.这是起始<span class="badge">10</span>
	</li>

//链接和首选
	<div class="list-group">
		<a href="#" class="list-group-item active">
			1.这是起始<span class="badge">10</span>
		</a>
		<a href="#" class="list-group-item">2.这是第二条数据</a>
		<a href="#" class="list-group-item">3.这是第三排信息</a>
		<a href="#" class="list-group-item">4.这是末尾</a>
	</div>

//按钮式列表
	<div class="list-group">
		<button class="list-group-item active">
			1.这是起始 <span class="badge">10</span>
		</button>
		<button class="list-group-item">2.这是第二条数据</button>
		<button class="list-group-item">3.这是第三排信息</button>
		<button class="list-group-item">4.这是末尾</button>
	
</div>

//设置项目被禁用
	class="list-group-item disabled"

//情景类
	<li class="list-group-item list-group-item-success">3.这是第三排信息</li>

//定制内容
	<div class="list-group">
		<a href="#" class="list-group-item active">
			<h4>内容标题</h4>
			<p class="list-group-item-text">这里是相关内容详情！</p>
		</a>
		<a href="#" class="list-group-item">
			<h4>内容标题</h4>
			<p class="list-group-item-text">这里是相关内容详情！</p>
		</a>
		<a href="#" class="list-group-item">
			<h4>内容标题</h4>
			<p class="list-group-item-text">这里是相关内容详情！</p>
		</a>
	</div>

二．面板组件
面板组件就是一个存放内容的容器组件。
//基本实例
	<div class="panel panel-default">
		<div class="panel-body">这里是详细内容区！</div>
	</div>

//带标题容器的面板
	<div class="panel panel-default">
		<div class="panel-heading">面板标题</div>
		<div class="panel-body">这里是详细内容区！</div>
	</div>


//也可以设置标题元素
	<div class="panel-heading">
		<h3 class="panel-title">面板标题</h3>
	</div>

//带注脚的面板
	<div class="panel-footer">
		这里是底部
	</div>

//情景效果：default、success、info、warning、danger、primary
	<div class="panel panel-success">

//表格类面板
		<div class="panel panel-default">
			<div class="panel-heading">表格标题</div>
			<div class="panel-body">
				<p>这里是表格标题的详细内容！</p>
			</div>
			<table class="table">
				<tr>
					<th>1</th>
					<th>2</th>
					<th>3</th>
				</tr>
				<tr>
					<td>1</td>
					<td>2</td>
					<td>3</td>
				</tr>
			</table>
		</div>

//列表类面板
	<div class="panel panel-default">
		<div class="panel-heading">表格标题</div>
		<div class="panel-body">
			<p>这里是表格标题的详细内容！</p>
		</div>
		<ul class="list-group">

			<li class="list-group-item">1.这里是首页</li>
			<li class="list-group-item">2.这里是第二个项目</li>
			<li class="list-group-item">3.这里是第三个项目</li>
			<li class="list-group-item">4.这里是第四个项目</li>
		</ul>
	</div>

三．响应式嵌入组件
根据被嵌入内容的外部容器的宽度，自动创建一个固定的比例，从而让浏览器自动确定内容的尺寸，能够在各种设备上缩放。
这些规则可以直接用于<iframe>、<embed>、<video><object>元素。
//16:9 响应式
	<div class="embed-responsive embed-responsive-16by9">
<embed width="100%" height="100%" src="" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque"></embed>
	</div>

//4:3 响应式
	<div class="embed-responsive embed-responsive-4by3">
<embed width="100%" height="100%"src="" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque"></embed>
	</div>

第 13 章 模态框插件

本节课我们主要学习一下 Bootstrap 中的模态框插件，这是一款交互式网站非常常见的弹窗功能插件。
一．基本使用
使用模态框的弹窗组件需要三层 div 容器元素，分别为 modal(模态声明层)、dialog(窗口声明层)、content(内容层)。
在内容层里面，还有三层，分别为 header(头部)、body(主体)、footer(注脚)。
//基本实例
		<!-- 模态声明，show 表示显示 -->
		<div class="modal show" tabindex="-1">	//tabindex="-1"取消焦点	ESC可以直接关闭

			<!-- 窗口声明 -->
			<div class="modal-dialog">

				<!-- 内容声明 -->
				<div class="modal-content">

					<!-- 头部 -->
					<div class="modal-header">

						<button type="button" class="close" data-dismiss="modal">
							<span>&times;</span>
						</button>
						<h4 class="modal-title">会员登录</h4>
					</div>

					<!-- 主体 -->
					<div class="modal-body">
						<p>暂时无法登录会员</p>
					</div>

					<!-- 注脚 -->
					<div class="modal-footer">
						<button type="button" class="btn btn-default">注册</button>
						<button type="button" class="btn btn-primary">登录</button>
					</div>
				</div>

			</div>
		</div>
如果想让模态框自动隐藏，然后通过点击按钮弹窗，那么需要做如下操作。

//模态框去掉 show，增加一个 id
	<div class="modal" id="myModal">

//点击触发模态框显示
	<button class="btn btn-primary btn-lg" data-toggle="modal" data-target="#myModal">点击弹窗</button>

//弹窗的大小有三种，默认情况下是正常，还有 lg(大)和 sm(小)
		<div class="modal-dialog modal-lg">
		<div class="modal-dialog sm-lg">

//可设置淡入淡出效果
	<div class="modal fade" id="myModal">

//在主体部分使用栅格系统中的流体
	<!-- 主体 -->
		<div class="modal-body">
			<div class="container-fluid">
				<div class="row">
					<div class="col-md-4">1</div>
					<div class="col-md-4">1</div>
					<div class="col-md-4">1</div>
				</div>
			</div>
		</div>

二．用法说明
基本使用介绍结束之后，我们就来看下插件的各种重要用法。所有的插件，都是基于JavaScript/jQuery 的。那么，就有四个要素：用法、参数、方法和事件。

1.用法
第一种：可以通过 data 属性
//data-toggle
	data-toggle="modal" data-target="#myModal"
	data-toggle 表示触发类型
	data-target 表示触发的节点

如果不是使用<button>，而是<a>，其中 data-target 也可以使用 href="#myModal"
取代。
当然，我们建议使用 data-target。除了 data-toggle 和 data-target 两个声明属性外，还有一些可以用选项。

2.参数
可以通过在 HTML 元素上设置 data-*的属性声明来控制效果。
属性名称 		类型 		默认值 				描述
data-backdrop         布尔值或'		static'true	默认值 true，表示背景存在黑灰透明遮罩，且单击空白背景可关闭弹窗；
							如果为 false，表示背景不存在黑灰透明遮罩，且点击空白背景不可关闭
							弹窗；
							如果是字符串'static'，表示背景存在黑灰透明遮罩，且点击空白不可关闭弹窗。

data-keyboard 		布尔值 		true 		如果是 true，按 esc 键会关闭窗口；
							如果是 false，按 esc 键会不会关闭。

data-show 		布尔值 		true 		如果是 true，初始化时，默认显示；
							如果是 false，初始化时，默认隐藏。

href 			url路径 		空值		如果值不是以#号开头，则表示一个url 地址，加载 url 内容到modal-content 容器里，并只加载一次。
							如果是#号，就是取代data-target 的方法。

//空白背景且点击不关闭
	data-backdrop="false"

//按下 esc 不关闭
	data-keyboard="false"

//初始化隐藏，如果是按钮点击触发，第一次点击则无法显示，第二次显示。
	data-show="false"

//加载一次 index.html 到容器内
	href="index.html" 
当然，也可以在 JavaScript 直接设置。
	属性名称			 类型 		默认值 		描述
	backdrop 		布尔值或'	static'true	默认值 true，表示背景存在黑灰透明遮罩，且单击空白背景可关闭弹窗；
								如果为 false，表示背景不存在黑灰
透明遮罩，且点击空白背景不可关闭
								弹窗；
								如果是字符串'static'，表示背景存在黑灰透明遮罩，且点击空白不可关闭弹窗。
								keyboard 布尔值 true 如果是 true，按 esc 键会关闭窗口；
								如果是 false，按 esc 键会不会关闭。

	show 			布尔值 		true		如果是 true，初始化时，默认显示；
								如果是 false，初始化时，默认隐藏。

	remote 			url路径 		空值 		远程获取指定内容填充到modal-content 容器内。

//通过 jQuery 方式声明
	$('#myModal').modal({
		show : true,
		backdrop : false,
		keyboard : false,
		remote : 'index.html',
	});

3.方法
如果说，默认不显示弹窗，那么怎么才能通过点击前后弹窗呢？
参数名称 	使用方法 			描述
toggle 	   .modal('toggle'); 		触发时，反转切换弹窗状态

show 	   .modal('show'); 		触发时，显示弹窗

hide 	   .modal('hide');		触发时，关闭弹窗

//点击显示弹窗
	$('#btn').on('click', function () {
		$('#myModal').modal('show');
	});

4.事件
模态框支持 4 种时间，分别对应弹出前、弹出后、关闭前和关闭后。
事件类型 			描述
show.bs.modal 		在 show 方法调用时立即触发。
shown.bs.modal 		在模态框完全显示出来，并且等 CSS 动画完成之后触发。
hide.bs.modal 		在 hide 方法调用时，但还未关闭隐藏时触发。
hidden.bs.modal 在模态框完全隐藏之后，并且等 CSS 动画完成之后触发。

	$('#myModal').on('show.bs.modal', function () {
		alert('在 show 方法调用时立即触发！');
	});

	$('#myModal').on('shown.bs.modal', function () {
		alert('在模态框显示完毕后触发！');
	});

	$('#myModal').on('hide.bs.modal', function () {
		alert('在 hide 方法调用时立即触发！');
	});

	$('#myModal').on('hiden.bs.modal', function () {
		alert('在模态框显示完毕后触发！');
	});

	$('#myModal').on('loaded.bs.modal', function () {
		alert('远程数据加载完毕后触发！');
	});


第 14 章 下拉菜单和滚动监听插件

本节课我们主要学习一下 Bootstrap 中的下拉菜单插件，这个插件在以组件的形式我们已经学习过，那么现在来看看怎么和 JavaScript 交互的。
一．下拉菜单
常规使用中，和组件方法一样，代码如下：
//声明式用法
	<div class="dropdown">
		<button class="btn btn-primary" data-toggle="dropdown">
			下拉菜单
			<span class="caret"></span>
		</button>
		<ul class="dropdown-menu">
			<li><a href="#">首页</a></li>
			<li><a href="#">产品</a></li>
			<li><a href="#">资讯</a></li>
			<li><a href="#">关于</a></li>
		</ul>
	</div>

声明式用法的关键核心：
1.外围容器使用 class="dropdown"包裹；
2.内部点击按钮事件绑定 data-toggle="dropdown"；
3.菜单元素使用 class="dropdown-menu"。

//如果按钮在容器外部，可以通过 data-target 进行绑定。
	<button class="btn btn-primary" id="btn" data-toggle="dropdown" data-target="#dropdown">

在 JavaScript 调用中，没有属性，方法并不好用，下面介绍四个基本事件。

//下拉菜单方法，但仍然需要 data-*
	$('#btn').dropdown();
	$('#btn').dropdown('toggle');

下拉菜单支持 4 种事件，分别对应弹出前、弹出后、关闭前和关闭后。


事件类型				 描述

show.bs.dropdown 	在 show 方法调用时立即触发。
shown.bs.dropdown 	在下拉菜单完全显示出来，并且等 CSS 动画完成之后触发。
hide.bs.dropdown	 在 hide 方法调用时，但还未关闭隐藏时触发。
hidden.bs.dropdown	 在下拉菜单完全隐藏之后，并且等 CSS 动画完成之后触发。
	
//事件，其他雷同
	$('#dropdown').on('show.bs.dropdown', function () {
		alert('在调用 show 方法时立即触发！');
	});

二．滚动监听
滚动监听插件是用来根据滚动条所处在的位置自动更新导航项目，显示导航项目高亮显
示。
//基本实例
	<nav id="nav" class="navbar navbar-default">
		<a href="#" class="navbar-brand">Web 开发</a>
			<ul class="nav navbar-nav">
				<li><a href="#html5">HTML5</a></li>
				<li><a href="#bootstrap">Bootstrap</a></li>
				<li class="dropdown"><a href="#" data-toggle="dropdown">JavaScript <span class="caret"></span></a>
					<ul class="dropdown-menu">
						<li><a href="#jquery">jQuery</a></li>
						<li><a href="#yui">Yui</a></li>
						<li><a href="#extjs">Extjs</a></li>
					</ul>
				</li>
			</ul>
	</nav>

	<div data-offset="0" data-target="#nav" data-spy="scroll" style="height: 200px; overflow: auto; position: relative;padding: 0 10px;">
		<h4 id="html5">HTML5</h4>
		<p></p>
		<h4 id="bootstrap">Bootstrap</h4>
		<p></p>
		<h4 id="jquery">jQuery</h4>
		<p></p>
		<h4 id="yui">Yui</h4>
		<p></p>
		<h4 id="extjs">Extjs</h4>
		<p></p>
	</div>

这里有两个重要的属性，如下图：
属性名 			描述
data-offset 	默认值为 10，固定弄内容距滚动容器 10 像素以内，就高亮显示所对应的菜单。
data-spy 	设置 scroll，将设置滚动容器监听。
data-target 	设置#nav，绑定指定监听的菜单
PS：在一个菜单和一个容易的时候，data-target 不设置也可以稳定实现滚动监听高亮。但多个导航时，你不关联其中一个，会导致错误，所以，一般要加上。

如果使用 JavaScript 脚本方式，可以去掉 data-*，使用脚本属性定义：offset、spy
和 target。具体方法如下：
//使用脚本方式定义属性
	$('#content').scrollspy({
		offset : 0,
		target : '#nav',
	});

滚动监听还有一个切换到新条目的事件。
事件名				 描述
activate.bs.scrollspy 	每当一个新条目被激活后都将由滚动监听插件触发此事件。

//事件绑定在导航上
	$('#nav').on('activate.bs.scrollspy', function () {
		alert('新条目被激活后触发此事件！');
	});

滚动监听还有一个更新容器 DOM 的方法。
方法名 				描述
refresh 		更新容器 DOM 的方法。

//HTML 部分
		<section class="sec">
			<h4 id="html5">HTML5
			<a href="#" onclick="removeSec(this)">删除此项</a></h4>
			<p>...</p>
		</section>

//删除内容时，刷新一下 DOM，避免导航监听错位
	function removeSec(e) {
		$(e).parents('.sec').remove();
		$('#content').scrollspy('refresh');
	}
注意：这个方法必须使用 data-*声明式。



第 15 章 标签页和工具提示插件

本节课我们主要学习一下 Bootstrap 中的标签页和工具提示插件。
一．标签页
标签页也就是通常所说的选项卡功能。
//基本用法
	<ul class="nav nav-tabs">
		<li class="active"><a href="#html5" data-toggle="tab">HTML5</a></li>
		<li><a href="#bootstrap" data-toggle="tab">Bootstrap</a></li>
		<li><a href="#jquery" data-toggle="tab">jQuery</a></li>
		<li><a href="#extjs" data-toggle="tab">ExtJS</a></li>
	</ul>
	<div class="tab-content" style="padding: 10px;">
		<div class="tab-pane active" id="html5">...</div>
		<div class="tab-pane" id="bootstrap">...</div>
		<div class="tab-pane" id="jquery">...</div>
		<div class="tab-pane" id="extjs">...</div>
	</div>

//可以设置淡入淡出效果 fade，而 in 表示首选的内容默认显示
	<div class="tab-pane fade in active" id="html5">

//也可以换成胶囊式
	<ul class="nav nav-pills">

//data-target使用 data-target 绑定或不绑定效果都是一样的

//使用 JavaScript，直接使用 tab 方法。
	$('#nav a').on('click', function (e) {
		e.preventDefault();
		$(this).tab('show');
	});


事件类型 		描述
show.bs.tab 	在调用 tab 方法时触发
shown.bs.tab	在显示整个标签时触发

//事件，其他雷同
	$('#nav a').on('show.bs.tab', function () {
		alert('调用 tab 时触发！');
	});
	$('#nav a').on('shown.bs.tab', function () {
		alert('显示完 tab 时触发！');
	});

二．工具提示
工具提示就是通过鼠标移动选定在特定的元素上时，显示相关的提示语。
//基本实例
	<a href="#" data-toggle="tooltip" title="超文本标识符">HTML5</a>
//JS 部分需要声明
	$('#section').tooltip();

工具提示有很多属性来配置提示的显示，具体如下：
属性名 					描述
data-animation 		默认 true，在 tooltip 上应用一个 CSS fade 动画。
			如果设置 false，则不应用。

data-html 		默认 false，不允许提示内容格式为 html。如果设置
			为 true，则可以设置 html 格式的提示内容。

data-placement		默认值 top，还有 bottom、left、right 和 auto。
			如果 auto 会自行调整合适的位置，
			如果是 auto left则会尽量在左边显示，但左边不行就靠右边。

data-selector 		默认 false，可以选择绑定指定的选择器。

data-original-title	默认空字符串，提示语的内容。优先级比 title 低

title 			默认字空符串，提示语的内容。

data-trigger		默认值 hover foucs，表示怎么触发 tooltip，
			其他值为：click、manual。
			多个值用空格隔开，manual手动不能和其他同时设置。

data-delay		默认值 0，延迟触发 tooltip(毫秒)，如果传数字则，表示 show/hide 的毫秒数，如果传对象，结构为：
{show:500,hide:100}
data-container		默认值 false，将 tooltip 附加到特定的元素上。
			比如组合按钮组提示，容器不够，可以附加 body 上。container : 'body'

data-template		更改提示框的 HTML 提示语的模版，默认值为：
				<div class='tooltip'>
					<divclass='tooltip-arrow'></div>
					<div class='tooltip-inner'></div>
				</div>。

	<a href="#" rel="tooltip" data-toggle="tooltip" title="超文本标识符"
		data-animation="false"
		data-html="true"
		data-placement="auto"
		data-selector="a[rel=tooltip]"
		data-trigger="click"
		data-delay="500"
		data-template="<b>123</b>"
	>HTML5</a>

JavaScript 方式直接去掉前面的 data 即可。
包括：animation、html、placement、selector、original-title、title、trigger、delay、container 和 template 等属性。
//JavaScript 方式
	$('#section a').tooltip({
		delay : {show : 500,hide : 100,},
		container : 'body'
	});

JavaScript 有四个方法：show、hide、toggle 和 destroy 四种。
//显示
	$('#section a').tooltip('show');
//隐藏
	$('#section a').tooltip('hide');
//反转显示和隐藏
	$('#section a').tooltip('toggle');
//隐藏并销毁
	$('#section a').tooltip('destroy');
Tooltip 中事件有四种。

事件类型 			描述
show.bs.tooltip 	在 show 方法调用时立即触发
shown.bs.tooltip 	在提示框完全显示给用户之后触发
hide.bs.tooltip 	在 hide 方法调用时立即触发
hidden.bs.tooltip 	在提示框完全隐藏之后触发

//事件，其他雷同
	$('#select a').on('show.bs.tooltip', function () {
		alert('调用 show 时触发！');
	});




第 16 章 弹出框和警告框插件

本节课我们主要学习一下 Bootstrap 中的弹出框和警告框插件。
一．弹出框
弹出框即点击一个元素弹出一个包含标题和内容的容器。
//基本用法
	<button class="btn btn-lg btn-danger" type="button" data-toggle="popover" title="弹出框" data-content="这是一个弹出框插件">
		点击弹出/隐藏弹出框
	</button>
	//JavaScript 初始化
		$('button').popover();

弹出框插件有很多属性来配置提示的显示，具体如下：
属性名					 描述
data-animation		 默认 true，在 popover 上应用一个 CSS fade 动画。
			 如果设置 false，则不应用。

data-html 		 默认 false，不允许提示内容格式为 html。如果设置
			 为 true，则可以设置 html 格式的提示内容。

data-placement		 默认值 top，还有 bottom、left、right 和 auto。
			 如果 auto 会自行调整合适的位置，如果是 auto left
			 则会尽量在左边显示，但左边不行就靠右边。

data-selector 		 默认 false，可以选择绑定指定的选择器。

data-original-title 	 默认空字符串，弹出框的标题。优先级比 title 低

title 			 默认字空符串，弹出框的标题。

data-trigger		 默认值 click，表示怎么触发 popover，其他值为：
			 hover、focus、manual。多个值用空格隔开，manual
			 手动不能和其他同时设置。


data-delay		 默认值 0，延迟触发 popover(毫秒)，如果传数字则，
			 表示 show/hide 的毫秒数，如果传对象，结构为：
			 {show:500,hide:100}

data-container		 默认值 false，将 popover 附加到特定的元素上。比
			 如组合按钮组提示，容器不够，可以附加 body 上。
			 container : 'body'

data-template		 更改提示框的 HTML 提示语的模版，默认值为：
			 <div class="popover">
				<div class="arrow"></div>
				<h3class="popover-title"></h3>
				<div class="popover-content"></div>
			</div>

data-content 		默认值为空，弹出框的内容。

data-viewport 		设置外围容器的边际，具体代码看示例。
	$('button').popover({
		container : 'body',
		viewport : {
			selector : '#view',
			padding : 10,
		}
	});

通过 JavaScript 执行的方法有四个。
//显示
	$('button').popover('show');
//隐藏
	$('button').popover('hide');
//反转显示和隐藏
	$('button').popover('toggle');
//隐藏并销毁
	$('button').popover('destroy');
Popover 插件中事件有两种。
事件类型				 描述
show.bs.popover 	在调用 show 方法时触发
shown.bs.popover 	在显示整个弹窗时时触发
hide.bs.popover 	在调用 hide 方法时触发
hidden.bs.popover 	在完全关闭整个弹出时触发
//事件，其他雷同

	$('button').on('show.bs.tab', function () {
		alert('调用 show 方法时触发！');
	});
二．警告框
警告框即为点击小时的信息框。
//基本实例
	<div class="alert alert-warning">
		<button class="close" type="button" data-dismiss="alert">
			<span>&times;</span>
		</button>
		<p>警告：您的浏览器不支持！</p>
	</div>

//添加淡入淡出效果
	<div class="alert alert-warning fade in">
	如果用 JavaScript，可以代替 data-dismiss="alert"
	//JavaScript 方法
	$('.close').on('click', function () {
		$('#alert').alert('close');
	})
Alert 插件中事件有四种。
事件类型 			描述
close.bs.alert 		当 close 方法被调用后立即触发
closed.bs.alert 	当警告框被完全关闭后立即触发

//事件，其他雷同
	$('#alert').on('close.bs.alert', function () {
		alert('当 close 方法被触发时调用！');
	});



第 17 章 按钮和折叠插件

本节课我们主要学习一下 Bootstrap 中的按钮和折叠插件。
一．按钮
可以通过按钮插件创建不同状态的按钮。
//单个切换。
	<button class="btn btn-primary" data-toggle="button"autocomplete="off">单个切换</button>

注：在 Firefox 多次页面加载时，按钮可能保持表单的禁用或选择状态。解决方案是：添加 autocomplete="off"。

//单选按钮
	<div class="btn-group" data-toggle="buttons">
		<label for="" class="btn btn-primary active">
			<input type="radio" name="sex" autocomplete="off" checked> 男
		</label>
		<label for="" class="btn btn-primary">
			<input type="radio" name="sex" autocomplete="off"> 女
		</label>
	</div>

//复选按钮
	<div class="btn-group" data-toggle="buttons">
		<label for="" class="btn btn-primary active">
			<input type="checkbox" name="fa" autocomplete="off" checked>音乐
		</label>
		<label for="" class="btn btn-primary">
			<input type="checkbox" name="fa" autocomplete="off"> 体育
		</label>
		<label for="" class="btn btn-primary">
			<input type="checkbox" name="fa" autocomplete="off"> 美术
		</label>
		<label for="" class="btn btn-primary">
			
<input type="checkbox" name="fa" autocomplete="off"> 电脑
		</label>
	</div>

//加载状态
	<button id="myButton" type="button" data-loading-text="Loading..." class="btn btn-primary" autocomplete="off">加载状态</button>

		$('#myButton').on('click', function () {
				var btn = $(this).button('loading');
				setTimeout(function () {
				btn.button('reset');
			}, 1000);
		});
Button 插件中的 button 方法中有三个参数：toggle、reset、string(比如 loading、complete)。
//可代替 data-toggle="button"
	$('button').on('click', function () {
		$(this).button('toggle');
	})

二．折叠
通过点击可以折叠内容。
//基本实例
	<button class="btn btn-primary" data-toggle="collapse" data-target="#content">Bootstrap</button>
		<div class="collapse" id="content">
			<div class="well">....</div>
		</div>

//手风琴折叠
	<div class="panel-group" id="accordion">
		<div class="panel panel-default">
			<div class="panel-heading">
				
<h4 class="panel-title">
					<a href="#collapseOne" data-toggle="collapse" data-parent="#accordion">点击我进行展示，再点击我进行折叠，第一部分</a>
				</h4>
			</div>
			<div id="collapseOne" class="panel-collapse collapse in">
				<div class="panel-body">这里是第一部分。</div>
			</div>
		</div>
		<div class="panel panel-default">
			<div class="panel-heading">
				<h4 class="panel-title">
					<a href="#collapseTwo" data-toggle="collapse" data-parent="#accordion">点击我进行展示，再点击我进行折叠，第二部分</a>
				</h4>
			</div>
			<div id="collapseTwo" class="panel-collapse collapse">
				<div class="panel-body">这里是第二部分。</div>
			</div>
		</div>
		<div class="panel panel-default">
			<div class="panel-heading">
				<h4 class="panel-title">
					<a href="#collapseThree" data-toggle="collapse" data-parent="#accordion">点击我进行展示，再点击我进行折叠，第三部分</a>
				</h4>
			</div>
			<div id="collapseThree" class="panel-collapse collapse">
				<div class="panel-body">这里是第三部分。</div>
			</div>
		</div>
	</div>

属性名称 		描述
data-parent	默认值为 false，设置需指定父元素选择器。
		也就是说，选定其中一个折叠区，其他折叠将隐藏，实现手风琴效果。
data-toggle	如果前面加 data-*，设置'collapse'表示实现折叠；
		如果是 JavaScript 中的属性，默认为 true，实现反转。
//手风琴效果
	$('#collapseOne, #collapseTwo,#collapseThree, #collapseFour').collapse({
		parent : '#accordion',
		toggle : false,
	});

//手动调用
	$('button').on('click', function () {
		$('#collapseOne').collapse({
			toggle : true,
		});
	});

//collapse 方法还提供了三个参数：hide、show、toggle。
	$('#collapseOne').collapse('hide');
	$('#collapseTwo').collapse('show');
	$('button').on('click', function () {
		$('#collapseOne').collapse('toggle');
	});
Collapse 插件中事件有四种。
事件类型 			描述
show.bs.collapse 	在 show 方法调用时立即触发
shown.bs.collapse 	折叠区完全显示出来是触发
hide.bs.collapse 	在 hide 方法调用时触发
hidden.bs.collapse	该事件在折叠区域完全隐藏之后触发

//事件，其他雷同
	$('#collapseOne').on('show.bs.collapse', function () {
		alert('当 show 方法调用时触发');
	});
感谢收看本次教程！




第 18 章 轮播插件
本节课我们主要学习一下 Bootstrap 中的轮播插件。
一．轮播
轮播插件就是将几张同等大小的大图，按照顺序依次播放。
//基本实例。
	<div id="myCarousel" class="carousel slide">
		<ol class="carousel-indicators">
			<li data-target="#myCarousel" data-slide-to="0" class="active"></li>
			<li data-target="#myCarousel" data-slide-to="1"></li>
			<li data-target="#myCarousel" data-slide-to="2"></li>
		</ol>
		<div class="carousel-inner">
			<div class="item active">
				<img src="img/slide1.png" alt="第一张">
				<div class="carousel-caption">
					<h3>Bootstrap</h3>
					<p>Bootstrap是一款HTML5响应式框架</p>
				</div>
			</div>
			<div class="item">
				<img src="img/slide2.png" alt="第二张">
				<div class="carousel-caption">
					<h3>Bootstrap</h3>
					<p>Bootstrap是一款HTML5响应式框架</p>
				</div>
			</div>
			<div class="item">
				<img src="img/slide3.png" alt="第三张">
				<div class="carousel-caption">
					<h3>Bootstrap</h3>
					<p>Bootstrap是一款HTML5响应式框架</p>
				</div>
			</div>
		</div>
		<a href="#myCarousel" data-slide="prev" class="carousel-control left">&lsaquo;</a>
		<a href="#myCarousel" data-slide="next" class="carousel-control right">&rsaquo;</a>
	</div>

data 				属性解释：
1.data-slide		接受关键字 prev 或 next，用来改变幻灯片相对于当前位置的位置；
2.data-slide-to 	来向轮播底部创建一个原始滑动索引，data-slide-to="2"将把滑动块移动到一个特定的索引，索引从 0 开始计数。
3.data-ride="carousel"	属性用户标记轮播在页面加载时开始动画播放。


轮播插件有三个自定义属性：
属性名称 			描述
data-interval 		默认值 5000，幻灯片的等待时间(毫秒)。如果为
			false，轮播将不会自动开始循环。

data-pause 		默认鼠标停留在幻灯片区域(hover)即暂停轮播，鼠标离开即启动轮播。

data-wrap 		默认值 true，轮播是否持续循环。
			如果在 JavaScript 调用就直接使用键值对方法，并去掉 data-；

//设置自定义属性
	$('#myCarousel').carousel({
		//设置自动播放/2 秒
		interval : 2000,
		//设置暂停按钮的事件
		pause : 'hover',
		//只播一次
		wrap : false,
	});

轮播插件还提供了一些方法，如下：
方法名称 		描述
cycle 		循环各帧(默认从左到右)
pause 		停止轮播
number 		轮播到指定的图片上(小标从 0 开始，类似数组)
prev 		循环轮播到上一个项目
next 		循环轮播到下一个项目

//点击按钮执行
	$('button').on('click', function () {
		//点击后，自动播放
		$('#myCarousel').carousel('cycle');
		//其他雷同
	}

方法名称 			描述
slide.bs.carousel 	当调用 slide 实例方式时立即触发该事件。
slid.bs.carousel 	当轮播完成一个幻灯片触发该事件。

//事件
	$('#myCarousel').on('slide.bs.carousel', function () {
		alert('当调用 slide 实例方式时立即触发');
	});

	$('#myCarousel').on('slid.bs.carousel', function () {
		alert('当轮播完成一个幻灯片触发');
	});



第 19 章 附加导航插件
本节课我们主要学习一下 Bootstrap 中的附加导航插件。
一．附加导航
附加导航即粘贴在屏幕某处实现锚点功能。
//基本实例。
	<body data-spy="scroll" data-target="#myScrollspy">
		<div class="container">
			<div class="jumbotron" style="height:150px">
				<h1>Bootstrap Affix</h1>
			</div>
			<div class="row">
				<div class="col-xs-3" id="myScrollspy">
					<ul class="nav nav-pills nav-stacked" data-spy="affix" data-offset-top="150">
						<li class="active"><a href="#section-1">第一部分</a></li>
						<li><a href="#section-2">第二部分</a></li>
						<li><a href="#section-3">第三部分</a></li>
						<li><a href="#section-4">第四部分</a></li>
						<li><a href="#section-4">第五部分</a></li>
					</ul>
				</div>
				<div class="col-xs-9">
					<h2 id="section-1">第一部分</h2>
					<p>...</p>
					<h2 id="section-2">第二部分</h2>
					<p>...</p>
					<h2 id="section-3">第三部分</h2>
					<p>...</p>
					<h2 id="section-4">第四部分</h2>
					<p>...</p>
					<h2 id="section-5">第四部分</h2>
					<p>...</p>
				</div>

			</div>
		</div>
//导航的 CSS 部分
	ul.nav-pills {width: 200px;}
	ul.nav-pills.affix{top: 30px;}
//JavaScript 代替 data-spy="affix" data-offset-top="125"
	$('#myAffix').affix({
		offset: {
		top: 150
		}
	})
我们默认使用的是 top，当然也可以默认居底 bottom。这个定位方式是直接通过 CSS定位的。

//设置成 bottom
	ul.nav-tabs.affix-bottom{bottom : 30px;}
//设置成 bottom
	$('#myAffix').affix({
		offset: {
		bottom: 150
		}
	})
Affix 包含几个事件，如下：
事件名称 				描述
affix.bs.affix 			在定位结束之前立即触发
affixed.bs.affix 		在定位结束之后立即触发
affix-top.bs.affix 		在定位元素应用 affixed-top 效果之前触发
affixed-top.bs.affix 		在定位元素应用 affixed-top 效果之后触发
affix-bottom.bs.affix 		在定位元素应用 affixed-bottom 效果之前触发
affixed-bottom.bs.affix 	在定位元素应用 affixed-bottom 效果之后触发

//其他雷同

	$('#myAffix').on('affixed-top.bs.affix', function () {
		alert('触发！');
	});


第 20 章 项目实战--响应式导航[1]


一．响应式导航
//基本导航组件+响应式
	<nav class="navbar navbar-default navbar-fixed-top">
		<div class="container">
			<div class="navbar-header">
				<a href="#" class="navbar-brand" style="margin:0;padding:0;"><img src="img/logo.png" alt="瓢城企训网"></a>
				<button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar-collapse">
					<span class="sr-only">切换导航</span>
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>
				</button>
			</div>
			<div class="collapse navbar-collapse" id="navbar-collapse">
				<ul class="nav navbar-nav navbar-right" style="margin-top:0;">
					<li class="active"><a href="#"><span class="glyphicon glyphicon-home"></span> 首页</a></li>
					<li><a href="#"><span class="glyphicon glyphicon-list"></span> 资讯</a></li>
					<li><a href="#"><span class="glyphicon glyphicon-fire"></span> 案例</a></li>
					<li><a href="#"><span class="glyphicon glyphicon-question-sign"></span> 关于</a></li>
				</ul>
			</div>
		</div>
	</nav>



第 20 章 项目实战--响应式轮播图[2]
一．响应式轮播图
//响应式轮播图
	<div id="myCarousel" class="carousel slide">
		<ol class="carousel-indicators">
			<li data-target="#myCarousel" data-slide-to="0" class="active"></li>
			<li data-target="#myCarousel" data-slide-to="1"></li>
			<li data-target="#myCarousel" data-slide-to="2"></li>
		</ol>
		<div class="carousel-inner">
			<div class="item active" style="background:#223240;">
				<a href="#"><img src="img/slide1.png" alt="第一张"></a>
			</div>
			<div class="item" style="background:#F5E4DC;">
				<a href="#"><img src="img/slide2.png" alt="第二张"></a>
			</div>
			<div class="item" style="background:#DE2A2D;">
				<a href="#"><img src="img/slide3.png" alt="第三张"></a>
			</div>
		</div>
		<a href="#myCarousel" data-slide="prev" class="carousel-control left">&lsaquo;</a>
		<a href="#myCarousel" data-slide="next" class="carousel-control right">&rsaquo;</a>
	</div>
//所需要的 jQuery 控制
	$('#myCarousel').carousel({
		//设置自动播放/2 秒
		interval : 3000,
	});

//调整轮播器箭头位置
	$('.carousel-control').css('line-height', $('.carousel-inner img').height() + 'px');
		$(window).resize(function() {
			//有高度就添加 无高度就不添加 为了调节三张图的左右箭头
			var $height = $('.carousel-inner img').eq(0).height() ||
			$('.carousel-inner img').eq(1).height() ||
			$('.carousel-inner img').eq(2).height();
			$('.carousel-control').css('line-height', $height + 'px');
		});
//所需要的 CSS
	a:focus {outline: none;}
	.navbar-brand {padding:0;}
	#myCarousel {margin:50px 0 0 0;}
	.carousel-inner .item img {margin: 0 auto;}
	.carousel-control {font-size: 100px;}




第 20 章 项目实战--首页内容介绍[上][3]

一．首页内容介绍[上]
//关于上节课轮播图，手册上其实有一个更好的方案，并不需要通过额外的代码控制。
	<a href="#myCarousel" data-slide="prev" class="carousel-control left">
		<span class="glyphicon glyphicon-chevron-left"></span>
	</a>
	<a href="#myCarousel" data-slide="next" class="carousel-control right">
		<span class="glyphicon glyphicon-chevron-right"></span>
	</a>

//内容介绍上
	<div class="tab1">
		<div class="container">
			<h2 class="tab-h2">「 为什么选择瓢城企业培训 」</h2>
			<p class="tab-p">强大的师资力量，完美的实战型管理课程，让您的企业实现质的腾飞！</p>
			<div class="row">
				<div class="col-md-6 col">
					<div class="media">
						<div class="media-left media-top">
							<a href="#">
								<img class="media-object" src="img/tab1-1.png" alt="...">
							</a>
						</div>
						<div class="media-body">
							<h4 class="media-heading">课程内容</h4>
							<p class="text-muted">其他：高校不知名的讲师编写，没有任何实战价值的教材！</p>
							<p>其他：知名企业家、管理学大师联合编写的具有实现性教材！</p>
						</div>
					</div>
				
</div>
				<div class="col-md-6 col">
					<div class="media">
						<div class="media-left media-top">
							<a href="#">
								<img class="media-object" src="img/tab1-2.png" alt="...">
							</a>
						</div>
						<div class="media-body">
							<h4 class="media-heading">师资力量</h4>
							<p class="text-muted">其他：非欧美正牌大学毕业的、业界没有知名度的讲师！</p>
							<p>其他：美国哈佛、耶鲁等世界一流高校、享有声誉的名牌专家！</p>
						</div>
					</div>
				</div>
				<div class="col-md-6 col">
					<div class="media">
						<div class="media-left media-top">
							<a href="#">
								<img class="media-object" src="img/tab1-3.png" alt="...">
							</a>
						</div>
						<div class="media-body">
							<h4 class="media-heading">课时安排</h4>
							<p class="text-muted">其他：无法保证上课效率、没有时间表，任务无法完成！</p>
							<p>其他：保证正常的上课效率、制定一张时间表、当天的任务当天完成！</p>
						</div>
					</div>
				</div>
				<div class="col-md-6 col">
					<div class="media">
						<div class="media-left media-top">
							<a href="#">
								<img class="media-object" src="img/tab1-4.png" alt="...">
							</a>
						</div>
						<div class="media-body">
							
<h4 class="media-heading">服务团队</h4>
							<p class="text-muted">其他：社会招聘的、服务水平参差不齐的普通员工！</p>
							<p>其他：内部培养、经受过良好高端服务培训的高标准员工！</p>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
//对应的 CSS 部分
body {font-family: "Helvetica Neue", Helvetica, Arial, "Microsoft YaheiUI", "Microsoft YaHei", SimHei, "\5B8B\4F53", simsun, sans-serif;}
.tab-h2 {font-size: 20px;color: #0059B2;text-align: center;letter-spacing: 1px;}
.tab-p {font-size: 15px;color: #999;text-align: center;letter-spacing: 1px;margin: 20px 0 40px 0;}
.tab1 {margin: 30px 0;color: #666;}
.tab1 .media-heading {margin: 5px 0 20px 0;}
.tab1 .text-muted {color: #999;text-decoration: line-through;}
.tab1 .media-heading {
margin: 5px 0 20px 0;}
.tab1 .text-muted {color: #999;text-decoration: line-through;}
.tab1 .col {padding: 20px;}
/* 小屏幕（平板，大于等于 768px） */
	@media (min-width: 768px) {
		.tab-h2 {font-size: 26px;}
		.tab-p {font-size: 16px;}
	}

/* 中等屏幕（桌面显示器，大于等于 992px） */
	@media (min-width: 992px) {
		.tab-h2 {font-size: 28px;}
		.tab-p {font-size: 17px;}
	}

/* 大屏幕（大桌面显示器，大于等于 1200px） */
	@media (min-width: 1200px) {
		.tab-h2 {font-size: 30px;}
		.tab-p {font-size: 18px;}
	}


